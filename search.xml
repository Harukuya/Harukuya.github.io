<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Stacking1</title>
      <link href="/2025/04/01/Stacking1/"/>
      <url>/2025/04/01/Stacking1/</url>
      
        <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error,mean_absolute_error</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn_tree <span class="keyword">import</span> DecisionTreeRgeressor</span><br><span class="line"></span><br><span class="line">data = load_boston()</span><br><span class="line">X = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line">train_X,test_X, train_y, test_y = train_test_split(X,y,test_size = <span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stacking</span>(<span class="params">clf, x_train, y_train, x_test, n_folds=<span class="number">10</span></span>): <span class="comment"># 设定几折交叉验证</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这个函数是stacking的核心，使用交叉验证的方法得到次级训练集</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#计算训练集和测试集的样本数</span></span><br><span class="line">    train_num, test_num = x_train.shape[<span class="number">0</span>], x_test.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#存储结果</span></span><br><span class="line">    second_level_train_set = np.zeros((train_num,))</span><br><span class="line">    second_level_test_set = np.zeros((test_num,))</span><br><span class="line">    test_nfolds_sets = np.zeros((test_num, n_folds))</span><br><span class="line">    <span class="comment">#K折交叉验证</span></span><br><span class="line">    kf = KFold(n_splits=n_folds)</span><br><span class="line">    <span class="comment">#依次使用K折数据集训练数据</span></span><br><span class="line">    <span class="keyword">for</span> i,(train_index, test_index) <span class="keyword">in</span> <span class="built_in">enumerate</span>(kf.split(x_train)):</span><br><span class="line">        <span class="comment">#切分K折数据</span></span><br><span class="line">        x_tra, y_tra = x_train[train_index], y_train[train_index]</span><br><span class="line">        x_tst, y_tst = x_train[test_index], y_train[test_index]</span><br><span class="line">        <span class="comment">#训练数据</span></span><br><span class="line">        clf.fit(x_tra, y_tra)</span><br><span class="line">        <span class="comment">#对训练集和测试集进行预测</span></span><br><span class="line">        second_level_train_set[test_index] = clf.predict(x_tst)</span><br><span class="line">        test_nfolds_sets[:,i] = clf.predict(x_test)</span><br><span class="line">    <span class="comment">#计算返回的均值</span></span><br><span class="line">    second_level_test_set[:] = test_nfolds_sets.mean(axis = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> second_level_train_set, second_level_test_set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要融合的模型都有哪些</span></span><br><span class="line">rf_model = RandomForestRegressor()</span><br><span class="line">dr_model = DecisionTreeRegressor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#存储新特征的列表</span></span><br><span class="line">train_sets = []</span><br><span class="line">test_sets = []</span><br><span class="line"><span class="keyword">for</span> clf <span class="keyword">in</span> [rf_model,dr_model]:</span><br><span class="line">    train_set,test_set = get_stacking(clf,train_X, train_y, test_X, n_folds=<span class="number">10</span>)</span><br><span class="line">    train_sets.append(train_set)</span><br><span class="line">    test_sets.append(test_set)</span><br><span class="line"></span><br><span class="line">meta_train = np.concatenate([result_set.reshape(-<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">for</span> result_set <span class="keyword">in</span> train_sets],axis = <span class="number">1</span>)</span><br><span class="line">meta_test = np.concatenate([result_set.reshape(-<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">for</span> result_set <span class="keyword">in</span> test_sets],axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#弱学习器作为整合融合模型</span></span><br><span class="line">dr_clf = DecisionTreeRegressor(max_depth = <span class="number">3</span>)</span><br><span class="line">dr_clf.fit(meta_train,train_y)</span><br><span class="line"></span><br><span class="line">df_predict_train = dr_clf.predict(meta_train)</span><br><span class="line">df_predict_test = dr_clf.predict(meta_test)</span><br><span class="line"></span><br><span class="line">mean_squared_error(df_predict_train,train_y)</span><br><span class="line">mean_squared_error(df_predict_test,test_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际上需要把待融合的模型以及弱学习器模型参数调好再进行使用，否则容易过拟合。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机森林</title>
      <link href="/2025/04/01/RandomForest1/"/>
      <url>/2025/04/01/RandomForest1/</url>
      
        <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">data = load_boston()</span><br><span class="line">X = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">Y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line">train_X,test_X,train_y,test_y = train_test_split(X,y,test_size = <span class="number">0.3</span>) <span class="comment"># 如果想固定划分结果，用种子</span></span><br><span class="line"></span><br><span class="line">rfr = RandomForestRegressor()</span><br><span class="line">rfr.fit(train_X,train_y)</span><br><span class="line">train_predicts = rfr.predict(train_X)</span><br><span class="line">test_predicts = rfr.predict(test_X)</span><br><span class="line"></span><br><span class="line">mean_squared_error(train_predicts,train_y)</span><br><span class="line">mean_squared_error(test_predicts,test_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调节参数，决策树棵数</span></span><br><span class="line">error_trains = []</span><br><span class="line">error_tests = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">200</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># 修改n_estimators，也就是决策树棵数，并确定随机种子</span></span><br><span class="line">    rfr = RandomForestRegressor(n_estimators = i,random_state = <span class="number">90</span>) <span class="comment"># 控制种子，保证变量唯一</span></span><br><span class="line">    rfr.fit(train_X,train_y)</span><br><span class="line">    train_predicts = rfr.predict(train_X)</span><br><span class="line">    test_predicts = rfr.predict(test_X)</span><br><span class="line">    error_trains.append(mean_squared_error(train_predicts,train_y))</span><br><span class="line">    mean_squared_error.append((test_predicts,test_y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制调参图</span></span><br><span class="line">x = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>,<span class="number">200</span>,<span class="number">10</span>))</span><br><span class="line">plt.plot(x,error_trains,<span class="string">&#x27;--&#x27;</span>,label = <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">plt.plot(x,error_tests,<span class="string">&#x27;o&#x27;</span>,label = <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;n_estimators&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;MSE&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成模型</title>
      <link href="/2025/04/01/Integratedmodel/"/>
      <url>/2025/04/01/Integratedmodel/</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>集成模型，顾名思义，使用多个模型完成一件任务。找一种策略融合N个模型</li><li>同质学习器：只改变超参数，本质上使用同一种方法，如用线性回归，但用不同超参数。</li><li>异质学习器：使用不同的方法，如用决策树+线性回归来决策。</li></ul><h3 id="如何集成？"><a href="#如何集成？" class="headerlink" title="如何集成？"></a>如何集成？</h3><p>分为平均策略和加权策略，如图所示。<br>两种策略都是线性的。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/集成学习策略.png" alt="<center>集成学习策略"/></div><span class="image-caption"><center>集成学习策略</span></div></p><h3 id="为什么可行？"><a href="#为什么可行？" class="headerlink" title="为什么可行？"></a>为什么可行？</h3><p>随机森林由多个决策树构成，如图，有四棵决策树。从样本中抽n列特征（少于总数），放到第一个决策树中，再随机抽，放入第二个树，以此类推，进行建模，最后将y进行平均。<br>每一棵树都可以反馈自己的准确率等情况。<br>也可以返回每个x对于y的重要性。可以用来剔除等，优化算力。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/随机森林.png" alt="<center>随机森林"/></div><span class="image-caption"><center>随机森林</span></div></p><h3 id="Stacking集成"><a href="#Stacking集成" class="headerlink" title="Stacking集成"></a>Stacking集成</h3><ol><li>线性集成包含：  <ul><li>Bagging——Random forest，是平均集成</li><li>Boosting——GBDT，加权集成</li></ul></li><li>非线性集成：<br>一种非线性集成。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/stacking.png" alt="<center>Stacking集成"/></div><span class="image-caption"><center>Stacking集成</span></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树模型2</title>
      <link href="/2025/04/01/DecisionTree2/"/>
      <url>/2025/04/01/DecisionTree2/</url>
      
        <content type="html"><![CDATA[<h3 id="决策树分类"><a href="#决策树分类" class="headerlink" title="决策树分类"></a>决策树分类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line"><span class="comment"># data返回一个字典</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = load_iris()</span><br><span class="line"></span><br><span class="line">x = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接看y是三分类，先看看二分类</span></span><br><span class="line">x = x[<span class="number">50</span>:]</span><br><span class="line">y = y[<span class="number">50</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集划分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = <span class="number">0.2</span>,random_state = <span class="number">0</span>) <span class="comment"># 如果想固定划分结果，用种子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入决策树模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="comment"># 实例化模型</span></span><br><span class="line">model = DecisionTreeClassifier(max_depth = <span class="number">5</span>) <span class="comment"># 可设置参数，见前post</span></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测数据</span></span><br><span class="line">y_train_pred = model.predict(x_train)</span><br><span class="line">y_test_pred = model.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">accuracy_score(y_train_pred,y_train)</span><br><span class="line">accuracy_score(y_test_pred,y_test) <span class="comment"># 通过调整参数获得不同的准确率</span></span><br></pre></td></tr></table></figure><h3 id="决策树回归"><a href="#决策树回归" class="headerlink" title="决策树回归"></a>决策树回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line"><span class="comment"># data返回一个字典</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = load_boston()</span><br><span class="line"></span><br><span class="line">x = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集划分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(x,y,test_size = <span class="number">0.2</span>,random_state = <span class="number">0</span>) <span class="comment"># 如果想固定划分结果，用种子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="comment"># 实例化模型</span></span><br><span class="line">model = DecisionTreeRegressor(max_depth = <span class="number">5</span>) <span class="comment"># 可设置参数，见前post</span></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测数据</span></span><br><span class="line">y_train_pred = model.predict(X_train)</span><br><span class="line">y_test_pred = model.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">mean_squared_error(y_train_pred,y_train) <span class="comment"># 因为针对单个数据进行训练，一般结果会很好</span></span><br><span class="line">mean_squared_error(y_test_pred,y_test) <span class="comment"># 也能差一些，因为涉及到过拟合</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line">r2_score(y_train_pred,y_train) </span><br><span class="line">r2_score(y_test_pred,y_test) <span class="comment"># 也可以看出是过拟合</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树模型1</title>
      <link href="/2025/04/01/DecisionTree1/"/>
      <url>/2025/04/01/DecisionTree1/</url>
      
        <content type="html"><![CDATA[<h2 id="决策树分类"><a href="#决策树分类" class="headerlink" title="决策树分类"></a>决策树分类</h2><h3 id="决策树是什么"><a href="#决策树是什么" class="headerlink" title="决策树是什么"></a>决策树是什么</h3><ol><li>树：如图，分位根节点、中间结点、叶子结点。<br> 注意树的深度不算根节点。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/树.png" alt="<center>树"/></div><span class="image-caption"><center>树</span></div></li><li>决策树：针对多个指标进行多次划分，最后划分为一类。<br> 包含二叉树——每一次只划分两类。<br> 根节点：包含所有样本、划分的属性、划分的阈值。<br> 内部节点：包含划分后的样本、下一步划分的属性、划分的阈值。<br> 叶子结点：在这个决策路径下最后包含的样本。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/决策树.png" alt="<center>决策树"/></div><span class="image-caption"><center>决策树</span></div></li></ol><h3 id="决策树特点"><a href="#决策树特点" class="headerlink" title="决策树特点"></a>决策树特点</h3><ol><li>支持多分类</li><li>支持输出概率</li></ol><h3 id="决策树核心"><a href="#决策树核心" class="headerlink" title="决策树核心"></a>决策树核心</h3><p>CART决策树有两个核心：  </p><ol><li>如何选择划分的特征？</li><li>如何选择划分的阈值？</li></ol><ul><li>贪心策略：每一次划分都要使得两边的子集都足够纯，足够单一。</li></ul><ol><li>使用GINI指数进行判断。<br> GINI越小，样本越纯，分的越好。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/gini指数.png" alt="<center>gini指数"/></div><span class="image-caption"><center>gini指数</span></div></li><li>如何使用？  <ul><li>比较分类前GINI和分类后GINI加权和，越小越好  </li><li>贪心策略，多次改变分类条件，让GINI最小  </li><li>最小化分类后GINI加权和  </li></ul></li><li>数学表达<br> 如图，多设置几个阈值，排序后遍历，选最小的即可。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/gini算法.png" alt="<center>算gini"/></div><span class="image-caption"><center>算gini</span></div></li></ol><h2 id="决策树回归"><a href="#决策树回归" class="headerlink" title="决策树回归"></a>决策树回归</h2><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="决策树参数"><a href="#决策树参数" class="headerlink" title="决策树参数"></a>决策树参数</h2><p>如图。<br>最大深度：越大，模型越复杂，可以控制欠拟合、过拟合。<br>简单来讲max开头越大，趋向于过拟合。min开头越大，趋向于欠拟合。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/决策树参数.png" alt="<center>决策树参数"/></div><span class="image-caption"><center>决策树参数</span></div></p>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归3</title>
      <link href="/2025/03/31/LogisticRegression3/"/>
      <url>/2025/03/31/LogisticRegression3/</url>
      
        <content type="html"><![CDATA[<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line"><span class="comment"># data返回一个字典</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = load_iris()</span><br><span class="line"></span><br><span class="line">x = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接看y是三分类，先看看二分类</span></span><br><span class="line">x = x[<span class="number">50</span>:]</span><br><span class="line">y = y[<span class="number">50</span>:]</span><br><span class="line"></span><br><span class="line">y[:<span class="number">50</span>] = <span class="number">0</span></span><br><span class="line">y[<span class="number">50</span>:] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集划分</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = <span class="number">0.2</span>,random_state = <span class="number">0</span>) <span class="comment"># 如果想固定划分结果，用种子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入逻辑回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="comment"># 实例化模型</span></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">lr.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看训练情况</span></span><br><span class="line">y_train_pred = lr.predict(x_train)</span><br><span class="line">y_test_pred = lr.predict(x_test)</span><br><span class="line">y_train_pred</span><br><span class="line">y_test_pred</span><br><span class="line"><span class="comment"># 查看准确率</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">accuracy_score(y_train,y_train_pred) <span class="comment"># 查看训练集准确率</span></span><br><span class="line">accuracy_score(y_test,y_test_pred) <span class="comment"># 查看测试准确率</span></span><br><span class="line"><span class="comment"># 查看混淆矩阵，返回2x2数组</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line">cm1 = confusion_matrix(y_train,y_train_pred) <span class="comment"># 测试集</span></span><br><span class="line">P1 = cm1[<span class="number">0</span>,<span class="number">0</span>]/(cm1[<span class="number">0</span>,<span class="number">0</span>] + cm1[<span class="number">1</span>,<span class="number">0</span>]) <span class="comment"># 查准率</span></span><br><span class="line">R1 = cm1[<span class="number">0</span>,<span class="number">0</span>]/(cm1[<span class="number">0</span>,<span class="number">0</span>] + cm1[<span class="number">0</span>,<span class="number">1</span>]) <span class="comment"># 查全率</span></span><br><span class="line">F11 = <span class="number">2</span>/(<span class="number">1</span>/P1 + <span class="number">1</span>/R1) <span class="comment"># F1指标</span></span><br><span class="line">cm2 = confusion_matrix(y_test,y_test_pred) <span class="comment"># 训练集</span></span><br><span class="line">P2 = cm2[<span class="number">0</span>,<span class="number">0</span>]/(cm2[<span class="number">0</span>,<span class="number">0</span>] + cm2[<span class="number">1</span>,<span class="number">0</span>]) <span class="comment"># 查准率</span></span><br><span class="line">R2 = cm2[<span class="number">0</span>,<span class="number">0</span>]/(cm2[<span class="number">0</span>,<span class="number">0</span>] + cm2[<span class="number">0</span>,<span class="number">1</span>]) <span class="comment"># 查全率</span></span><br><span class="line">F12 = <span class="number">2</span>/(<span class="number">1</span>/P1 + <span class="number">1</span>/R1) <span class="comment"># F1指标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AUC、ROC曲线（训练集）</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_auc_score,roc_curve,auc</span><br><span class="line"><span class="comment"># 返回概率</span></span><br><span class="line">y_p = lr.predict_proba(x_train)[:,<span class="number">1</span>] <span class="comment"># 第一列</span></span><br><span class="line">fpr,tpr,thresholds = roc_curve(y_train,y_p) <span class="comment"># 计算FPR、TPR</span></span><br><span class="line"><span class="comment"># 直接计算AUC面积</span></span><br><span class="line">roc_auc = auc(fpr,tpr)</span><br><span class="line"><span class="comment"># 绘制ROC曲线图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.subplots(figsize = (<span class="number">8</span>,<span class="number">5</span>))</span><br><span class="line">plt.plot(fpr,tpr,color = <span class="string">&#x27;darkorange&#x27;</span>,lw = <span class="number">2</span>,label = <span class="string">&#x27;ROC curve(area = %0.4f)&#x27;</span>%roc_auc) <span class="comment"># ROC曲线</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],color = <span class="string">&#x27;navy&#x27;</span>,linestyle = <span class="string">&#x27;--&#x27;</span>) <span class="comment"># 对角线为虚线</span></span><br><span class="line">plt.xlim([<span class="number">0.0</span>,<span class="number">1.0</span>]) <span class="comment"># 制定x轴刻度范围</span></span><br><span class="line">plt.ylim([<span class="number">0.0</span>,<span class="number">1.05</span>]) <span class="comment"># 制定y轴刻度范围</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;FPR&#x27;</span>) <span class="comment"># x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;TPR&#x27;</span>) <span class="comment"># y轴标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;Train ROC Curve&#x27;</span>) <span class="comment"># 标题</span></span><br><span class="line">plt.legend(loc = <span class="string">&#x27;lower right&#x27;</span>) <span class="comment"># 图例以及位置</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化模型</span></span><br><span class="line">lr = LogisticRegression(penalty = <span class="string">&#x27;l2&#x27;</span>,C = <span class="number">0.1</span>) <span class="comment"># 制定正则化，确认C，改变模型复杂程度，C越大越复杂</span></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">lr.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看训练情况</span></span><br><span class="line">y_train_pred = lr.predict(x_train)</span><br><span class="line">y_test_pred = lr.predict(x_test)</span><br><span class="line">y_train_pred</span><br><span class="line">y_test_pred</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归2</title>
      <link href="/2025/03/31/LogisticRegression2/"/>
      <url>/2025/03/31/LogisticRegression2/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要设立分类评价指标？"><a href="#为什么要设立分类评价指标？" class="headerlink" title="为什么要设立分类评价指标？"></a>为什么要设立分类评价指标？</h3><ol><li>确定模型是否能用。</li><li>避免特殊情况下的唯准确率论，如样本不平衡，1个A，99个B的情况。</li></ol><h3 id="评估指标"><a href="#评估指标" class="headerlink" title="评估指标"></a>评估指标</h3><ol><li>混淆矩阵<br> 如混淆矩阵所示，所以求出查准率和查全率。<br> 根据这两个指标即可解决样本不均衡导致的单准确率无法判断模型优劣的问题。<br> 往往，我们要求查准率和查全率都要高，但实际上一方高了另一方会偏低。<br> 查准率偏向于使用训练集测试结果，查全率偏向于实际使用上的具体结果。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/评估指标.png" alt="<center>评估指标"/></div><span class="image-caption"><center>评估指标</span></div></li><li>什么时候用什么？<br> 查准率：如人脸识别，只关心预测对不对。<br> 查全率：确认诈骗信息，挖掘诈骗邮件，挖掘少数的样本。  </li><li>F1指标<br> F1指标表示了同时考虑两种情况，越大越好。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/F1指标.png" alt="<center>F1指标"/></div><span class="image-caption"><center>F1指标</span></div></li><li>AUC指标、ROC曲线，面积越大模型效果越好。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/AUC指标和ROC曲线.png" alt="<center>AUC指标和ROC曲线"/></div><span class="image-caption"><center>AUC指标和ROC曲线</span></div></li><li>多分类问题怎么办？<br> OVR策略（one vs rest）<br> OVR输出概率，看看输入的东西属于什么的概率最大，就当做哪一类。<br> 详细来说，就是将某一类样本当做一类，其他当做其他类，再分别对所有类别做如此操作，得出P1 P2 P3,最后哪个概率大就是那个。<br> 实际上，在python里面都会简单化。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/多分类.png" alt="<center>多分类"/></div><span class="image-caption"><center>多分类</span></div></li><li>多分类评估指标<br> 宏方法：分别建模、计算指标、取平均数<br> 微方法：建模、矩阵内计算平均值、计算各指标  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/多分类评估.png" alt="<center>多分类评估"/></div><span class="image-caption"><center>多分类评估</span></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归1</title>
      <link href="/2025/03/29/LogisticRegression1/"/>
      <url>/2025/03/29/LogisticRegression1/</url>
      
        <content type="html"><![CDATA[<h3 id="逻辑斯特回归是什么？"><a href="#逻辑斯特回归是什么？" class="headerlink" title="逻辑斯特回归是什么？"></a>逻辑斯特回归是什么？</h3><ol><li>不同于线性回归，逻辑回归是用来分类的。<br> 典型数据集——鸢尾花卉数据集，用于实验逻辑回归代码，实验分类算法。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/典型数据集.png" alt="<center>典型数据集"/></div><span class="image-caption"><center>典型数据集</span></div></li><li>如何将线性回归的方法改造成可以处理分类问题的方法？<br> 如图，f(X)即为线性回归得到的模型函数，由图可看出，y在0-1之间，可以看做概率，也可以看做小于0.5是一类，大于0.5是另一类，可用来做分类。<br> 问题被简化了，只需要将f(x)外面套上一个函数即可分类。<ul><li>类似于升降维度，<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/逻辑斯特回归.png" alt="<center>逻辑斯特回归"/></div><span class="image-caption"><center>逻辑斯特回归</span></div></li></ul></li><li>几何角度的理解：<br> f(x) = 0，是分界常数，将数据分为了两类，一类的yprob大于0.5，一类小于0.5。</li></ol><h3 id="如何计算逻辑斯特回归？"><a href="#如何计算逻辑斯特回归？" class="headerlink" title="如何计算逻辑斯特回归？"></a>如何计算逻辑斯特回归？</h3><ol><li>使用MSE？<br> 实测效果并不好，太多局部最优解。  </li><li>使用极大似然估计：<br> 计算所有样本发生某种情况的概率，也就是独立同分布，比如，可以同时算出A是1的概率P和A是0的概率1-P，取所有ABCD…判断正确的概率，相乘，使这个乘积最大就是拟合最好的情况（ABCD…都有正确的分类）。<br> 为了方便计算所以套了个log。<br> 最后红色的函数越小，拟合结果越好。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/极大似然估计.png" alt="<center>极大似然估计"/></div><span class="image-caption"><center>极大似然估计</span></div></li><li>完整策略<br> 只要找到策略函数最小时的系数就可以了。<br> 同样，需要正则化，C越大，模型越复杂，C越小，模型越简单。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/逻辑斯特正则化.png" alt="<center>逻辑斯特回归"/></div><span class="image-caption"><center>逻辑斯特回归</span></div>  </li><li>梯度下降法<br> 和之前一样。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/逻辑斯特梯度下降.png" alt="<center>逻辑斯特梯度下降"/></div><span class="image-caption"><center>逻辑斯特梯度下降</span></div></li></ol><h3 id="真实情况"><a href="#真实情况" class="headerlink" title="真实情况"></a>真实情况</h3><ol><li>往往无法做到线性可分，即一条线完美分开所有的两种类目。而太复杂又会发生过拟合。因此要调节C。</li><li>非线性问题，决策线是一个圆。<br> 可以对原来的x进行数据处理，全部平方。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/非线性问题.png" alt="<center>非线性问题"/></div><span class="image-caption"><center>非线性问题</span></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则化线性回归2</title>
      <link href="/2025/03/29/Regularization2/"/>
      <url>/2025/03/29/Regularization2/</url>
      
        <content type="html"><![CDATA[<h3 id="代码实现lasso回归"><a href="#代码实现lasso回归" class="headerlink" title="代码实现lasso回归"></a>代码实现lasso回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line">data = load_boston()</span><br><span class="line">x = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"><span class="comment"># 划分训练集和测试集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(x,y,test_size = <span class="number">0.2</span>,random = ...) <span class="comment"># 如果想固定划分结果，用种子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个lasso回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line">clf1 = Lasso(alpha = <span class="number">0.1</span>) <span class="comment"># α默认1，可调节。可以调节至欠拟合和过拟合之间。</span></span><br><span class="line">clf1.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">y_train_pred = clf1.predict(X_train)</span><br><span class="line">y_test_pred = clf1.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MSE</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">mean_squared_error(y_train,y_train_pred) <span class="comment"># 训练集</span></span><br><span class="line">mean_squared_error(y_test,y_test_pred) <span class="comment"># 测试集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写一个alpha列表，取多个值作对比</span></span><br><span class="line">alphas = [<span class="number">0.001</span>,<span class="number">0.005</span>,<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1.5</span>]</span><br><span class="line">mse_trains = []</span><br><span class="line">mse_tests = []</span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> alphas:</span><br><span class="line">    clf = Lasso(alpha = alpha)</span><br><span class="line">    clf.fit(X_train,y_train)</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_train_pred = clf.predict(X_train)</span><br><span class="line">    y_test_pred = clf.predict(X_test)</span><br><span class="line">    <span class="comment"># 存储</span></span><br><span class="line">    mse_trains.append(mean_squared_error(y_train,y_train_pred)) <span class="comment"># 训练集</span></span><br><span class="line">    mse_tests.append(mean_squared_error(y_test,y_test_pred)) <span class="comment"># 测试集</span></span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(alphas,mse_trains,label = <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">plt.plot(alphas,mse_tests,label = <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果mse特别大，则说明不适合做lasso回归，可以试试ridge回归。</span></span><br></pre></td></tr></table></figure><h3 id="代码实现ridge回归"><a href="#代码实现ridge回归" class="headerlink" title="代码实现ridge回归"></a>代码实现ridge回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化一个ridge回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line">clf1 = Ridge(alpha = <span class="number">0.1</span>) <span class="comment"># α默认1，可调节。可以调节至欠拟合和过拟合之间。</span></span><br><span class="line">clf1.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">y_train_pred = clf1.predict(X_train)</span><br><span class="line">y_test_pred = clf1.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MSE</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">mean_squared_error(y_train,y_train_pred) <span class="comment"># 训练集</span></span><br><span class="line">mean_squared_error(y_test,y_test_pred) <span class="comment"># 测试集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写一个alpha列表，取多个值作对比</span></span><br><span class="line">alphas = [<span class="number">0.001</span>,<span class="number">0.005</span>,<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1.5</span>]</span><br><span class="line">mse_trains = []</span><br><span class="line">mse_tests = []</span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> alphas:</span><br><span class="line">    clf = Ridge(alpha = alpha)</span><br><span class="line">    clf.fit(X_train,y_train)</span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_train_pred = clf.predict(X_train)</span><br><span class="line">    y_test_pred = clf.predict(X_test)</span><br><span class="line">    <span class="comment"># 存储</span></span><br><span class="line">    mse_trains.append(mean_squared_error(y_train,y_train_pred)) <span class="comment"># 训练集</span></span><br><span class="line">    mse_tests.append(mean_squared_error(y_test,y_test_pred)) <span class="comment"># 测试集</span></span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(alphas,mse_trains,label = <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">plt.plot(alphas,mse_tests,label = <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能用ridge更好</span></span><br><span class="line"><span class="comment"># 如何筛选？</span></span><br><span class="line"><span class="comment"># 选训练集mse变平缓时，测试集mse合适的时候的alpha即可</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则化线性回归1</title>
      <link href="/2025/03/28/Regularization1/"/>
      <url>/2025/03/28/Regularization1/</url>
      
        <content type="html"><![CDATA[<h3 id="如何防止过拟合？"><a href="#如何防止过拟合？" class="headerlink" title="如何防止过拟合？"></a>如何防止过拟合？</h3><ol><li>答：增加正则化项，减小模型复杂度。如最高次从三次方降到二次方。遵从“奥卡姆剃刀原则”。一旦模型太复杂，就只符合训练集了，泛化能力就会变差。  </li><li>三种新的回归模型  <ul><li>ridge回归：除了α外的额外项称为正则化项，α为比重，是超参数，人为规定。。α越大，θ就要越小。同时，α越小，代表使得拟合函数越复杂，因为用于减小模型复杂度的正则化项的比重小了。</li><li>lasso和elastic回归也类似类似，都是加了正则化项。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/三种新的回归.png" alt="<center>三种防止过拟合的回归"/></div><span class="image-caption"><center>三种防止过拟合的回归</span></div></li></ul></li></ol><h3 id="Ridge回归"><a href="#Ridge回归" class="headerlink" title="Ridge回归"></a>Ridge回归</h3><ol><li>α调的越大，θi就会越小。同时，对于一个α，θi越接近0，说明该参数对于模型影响越小。反之，θi远离0，则对模型更重要。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/ridge.png" alt="<center>ridge回归"/></div><span class="image-caption"><center>ridge回归</span></div></li></ol><h3 id="Lasso回归"><a href="#Lasso回归" class="headerlink" title="Lasso回归"></a>Lasso回归</h3><ol><li>可以筛选出哪个X对于模型更重要。  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/lasso.png" alt="<center>lasso回归"/></div><span class="image-caption"><center>lasso回归</span></div></li></ol><h3 id="Elastic回归"><a href="#Elastic回归" class="headerlink" title="Elastic回归"></a>Elastic回归</h3><ol><li>是将前两个结合使用。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>α越大，约束越强，模型越简单，拟合能力变弱。用于平衡测试集准确度和训练集准确度。</li><li>优化方法不同，ridge回归可以继续用梯度下降法优化，但lasso和elastic需要用其他方法。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交叉验证2</title>
      <link href="/2025/03/28/Cross-validation2/"/>
      <url>/2025/03/28/Cross-validation2/</url>
      
        <content type="html"><![CDATA[<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line">data = load_boston()</span><br><span class="line">x = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分训练集和测试集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(x,y,test_size = <span class="number">0.2</span>,random = ...) <span class="comment"># 如果想固定划分结果，用种子</span></span><br><span class="line"></span><br><span class="line">X_train.shape <span class="comment"># 查看情况，X_test,y_train,y_test应一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用线性模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用训练集上的x与y</span></span><br><span class="line">clf = LinearRegression()</span><br><span class="line">clf.fit(X_train,y_train)</span><br><span class="line">clf.coef_ <span class="comment"># 查看系数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该模型在训练集和测试集上的表现情况</span></span><br><span class="line">y_train_pred = clf.predict(X_train)</span><br><span class="line">y_test_pred = clf.predict(X_test)</span><br><span class="line"><span class="comment"># 查看MSE</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">mean_squared_error(y_train,y_train_pred) <span class="comment"># 训练集</span></span><br><span class="line">mean_squared_error(y_test,y_test_pred) <span class="comment"># 测试集</span></span><br><span class="line"><span class="comment"># 查看R²</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line">r2_score(y_train,y_train_pred) <span class="comment"># 训练集</span></span><br><span class="line">r2_score(y_test,y_test_pred) <span class="comment"># 测试集</span></span><br><span class="line"><span class="comment"># 查看绝对值</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line">mean_absolute_error(y_train,y_train_pred) <span class="comment"># 训练集</span></span><br><span class="line">mean_absolute_error(y_test,y_test_pred) <span class="comment"># 测试集</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交叉验证1</title>
      <link href="/2025/03/28/Cross-validation1/"/>
      <url>/2025/03/28/Cross-validation1/</url>
      
        <content type="html"><![CDATA[<h3 id="拟合情况"><a href="#拟合情况" class="headerlink" title="拟合情况"></a>拟合情况</h3><ol><li>泛化能力：模型对于未见过数据的预测能力（使用测试集）<br> 比如有500组数据，可以用400组用于训练，即训练集，剩下100组作为测试集。  </li><li>模型误差：  <ul><li>偏差大：多次训练，训练集平均拟合不好。离得太大了。</li><li>方差大：多次训练，测试集上效果抖动厉害。在测试集对比时，上下抖动太厉害。</li><li>泛化误差 = 偏差+误差+噪声，偏差小方差小才是好模型。</li></ul></li><li>欠拟合与过拟合：  <ul><li>欠拟合：模型在训练集上拟合的不好。还没上测试集的时候就已经表现出明显拟合欠缺。</li><li>过拟合：模型在训练集上拟合的很好，但在测试集上拟合的不好。</li><li>好的模型应该对训练集和测试集的拟合上都很好。</li></ul></li></ol><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><ol><li>原理<br>等分后，进行训练，将测试结果（mse）保存，最后平均，得到总的结果。如果结果差→偏差大，波动大→方差大  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/交叉验证.png" alt="<center>交叉验证"/></div><span class="image-caption"><center>交叉验证</span></div>  实际操作中，可以先73分，作为训练集测试集，进行测试，没必要完全使用交叉验证。</li></ol><h3 id="模型调参的评估指标——模型在具体问题上的适用性"><a href="#模型调参的评估指标——模型在具体问题上的适用性" class="headerlink" title="模型调参的评估指标——模型在具体问题上的适用性"></a>模型调参的评估指标——模型在具体问题上的适用性</h3><p>MSE：真实值与预测值的差的平方和/N；RMSE：MSE开根；MAE：如图；<br>SSr：预测Y点到真实Y平均值的距离；SST：实际Y点到真实Y平均值的距离。<br>R方接近于1更好，MSE越接近于0越好。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/适用性.png" alt="<center>适用性"/></div><span class="image-caption"><center>适用性</span></div>  </p>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归2</title>
      <link href="/2025/03/27/Linearregression2/"/>
      <url>/2025/03/27/Linearregression2/</url>
      
        <content type="html"><![CDATA[<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.dataseats <span class="keyword">import</span> load_boston <span class="comment"># 使用库自带的数据演示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入波士顿房价数据</span></span><br><span class="line">data = load_boston()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取x和y</span></span><br><span class="line">x = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sklearn线性回归库</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个线性回归</span></span><br><span class="line">clf = LineaRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据已知的xy进行训练</span></span><br><span class="line">clf.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每个x对应的系数</span></span><br><span class="line">clf.coef_</span><br><span class="line"><span class="comment"># 查看常数项（截距项）</span></span><br><span class="line">clf.intercept_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试，选101行</span></span><br><span class="line">clf.predict([x[<span class="number">101</span>]])</span><br><span class="line"><span class="comment"># 将所有x进行预测，可以用来对比</span></span><br><span class="line">y_pred = clf.predict(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，计算均方和</span></span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">mean_squared_error(y,y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图展示一下</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(y)))</span><br><span class="line">plt.plot(x,y,label = <span class="string">&#x27;true&#x27;</span>) <span class="comment"># 真实值曲线</span></span><br><span class="line">plt.plot(x,y_pred,label = <span class="string">&#x27;pred&#x27;</span>) <span class="comment"># 预测值曲线</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归1</title>
      <link href="/2025/03/25/Linearregression1/"/>
      <url>/2025/03/25/Linearregression1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、任务驱动"><a href="#一、任务驱动" class="headerlink" title="一、任务驱动"></a>一、任务驱动</h3><p>简单来讲，我们要使用线性回归的方法，求出一个函数，将如图14个参数输入进去后，得到预测房价。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/任务驱动.png" alt="<center>示意图"/></div><span class="image-caption"><center>示意图</span></div>  </p><h3 id="二、线性回归是什么？"><a href="#二、线性回归是什么？" class="headerlink" title="二、线性回归是什么？"></a>二、线性回归是什么？</h3><p>线性回归，即要求所有点到某线的距离之和最小，一般是看均方和，如图中所示。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/线性回归.png" alt="<center>线性回归"/></div><span class="image-caption"><center>线性回归</span></div><br>用矩阵表达如图所示。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/用矩阵表达.png" alt="<center>用矩阵表达"/></div><span class="image-caption"><center>用矩阵表达</span></div></p><h3 id="三、如何算出参数θ？"><a href="#三、如何算出参数θ？" class="headerlink" title="三、如何算出参数θ？"></a>三、如何算出参数θ？</h3><ol><li>也就是多元二次函数最小值问题，举个例子，当“θx”为一元，则直接对（θx-y）²求导，让导数为零即可。<br> 但这种方法有限制：  <ul><li>矩阵的维度无法太大。</li><li>速度会变慢。</li></ul></li><li>梯度下降法，推荐。<br>如图。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/梯度下降法.png" alt="<center>图解梯度下降法"/></div><span class="image-caption"><center>图解梯度下降法</span></div>  </li><li>梯度下降法注意事项<br> 3.1 步长β：也称为学习效率，属于超参数。要大小合适，或者前期较大，后期较小。若太大，结果反复横跳，若太小，耗时太长。<br> 3.2 下凸函数（如x²），唯一极小值即为最小值，要小心上凸函数以及局部平缓的情况，可能会陷入局部最优（极小值、鞍点）。可以取多个初始值。<br> 3.3 注意去量纲，进行标准化与归一化。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Datapreprocess2</title>
      <link href="/2025/03/24/Datapreprocess2/"/>
      <url>/2025/03/24/Datapreprocess2/</url>
      
        <content type="html"><![CDATA[<h3 id="零、准备工作"><a href="#零、准备工作" class="headerlink" title="零、准备工作"></a>零、准备工作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;111.xlsx&#x27;</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><h3 id="一、标准化"><a href="#一、标准化" class="headerlink" title="一、标准化"></a>一、标准化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据标准化</span></span><br><span class="line">data[<span class="string">&#x27;面积&#x27;</span>] <span class="comment"># 查看一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算标准化值，返回表格</span></span><br><span class="line">(data[<span class="string">&#x27;面积&#x27;</span>] - data[<span class="string">&#x27;面积&#x27;</span>].mean())/data[<span class="string">&#x27;面积&#x27;</span>].std() </span><br><span class="line"><span class="comment"># 放入原表格</span></span><br><span class="line">data[<span class="string">&#x27;面积（标准化）&#x27;</span>] = (data[<span class="string">&#x27;面积&#x27;</span>] - data[<span class="string">&#x27;面积&#x27;</span>].mean())/data[<span class="string">&#x27;面积&#x27;</span>].std()</span><br><span class="line"><span class="comment"># 确认均值是否为0，标准差是否为1，即是否标准化成功</span></span><br><span class="line">data[<span class="string">&#x27;面积（标准化）&#x27;</span>].mean()</span><br><span class="line">data[<span class="string">&#x27;面积（标准化）&#x27;</span>].std()</span><br></pre></td></tr></table></figure><h3 id="二、归一化"><a href="#二、归一化" class="headerlink" title="二、归一化"></a>二、归一化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算</span></span><br><span class="line">(data[<span class="string">&#x27;面积&#x27;</span>] - data[<span class="string">&#x27;面积&#x27;</span>].<span class="built_in">min</span>())/(data[<span class="string">&#x27;面积&#x27;</span>].<span class="built_in">max</span>() - data[<span class="string">&#x27;面积&#x27;</span>].<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># 入表</span></span><br><span class="line">data[<span class="string">&#x27;面积（归一化）&#x27;</span>] = (data[<span class="string">&#x27;面积&#x27;</span>] - data[<span class="string">&#x27;面积&#x27;</span>].<span class="built_in">min</span>())/(data[<span class="string">&#x27;面积&#x27;</span>].<span class="built_in">max</span>() - data[<span class="string">&#x27;面积&#x27;</span>].<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># 查看最小值是否为0，最大值是否为1</span></span><br><span class="line">data[<span class="string">&#x27;面积（归一化）&#x27;</span>].<span class="built_in">min</span>()</span><br><span class="line">data[<span class="string">&#x27;面积（归一化）&#x27;</span>].<span class="built_in">max</span>()</span><br></pre></td></tr></table></figure><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等宽离散化（人为)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一下，确认最大最小值</span></span><br><span class="line">data[<span class="string">&#x27;最近地铁距离&#x27;</span>].<span class="built_in">max</span>()</span><br><span class="line">data[<span class="string">&#x27;最近地铁距离&#x27;</span>].<span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置0-500为近，500-1000为较近，1000-2000为远</span></span><br><span class="line">bins = [<span class="number">0</span>,<span class="number">500</span>,<span class="number">1000</span>,<span class="number">2000</span>]</span><br><span class="line"><span class="comment"># pd库提供相应分类方法</span></span><br><span class="line">pd.cut(data[<span class="string">&#x27;最近地铁距离&#x27;</span>].bins = bins) <span class="comment"># 返回表格，告知每一个是哪个区间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存入</span></span><br><span class="line">data[<span class="string">&#x27;等宽划分距离&#x27;</span>] = pd.cut(data[<span class="string">&#x27;最近地铁距离&#x27;</span>],bins = bins)</span><br><span class="line"><span class="comment"># 查看每个区间都有多少值</span></span><br><span class="line">data[<span class="string">&#x27;等宽划分距离&#x27;</span>].value_counts()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等频离散化（每组数量差不多）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分三组，q=3</span></span><br><span class="line">pd.qcut(data[<span class="string">&#x27;最近地铁距离&#x27;</span>],q = <span class="number">3</span>) <span class="comment"># 自带函数</span></span><br><span class="line">data[<span class="string">&#x27;等频划分距离&#x27;</span>] = pd.qcut(data[<span class="string">&#x27;最近地铁距离&#x27;</span>],q = <span class="number">3</span>) <span class="comment"># 存入</span></span><br><span class="line">data[<span class="string">&#x27;等频划分距离&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><h3 id="独热编码"><a href="#独热编码" class="headerlink" title="独热编码"></a>独热编码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">&#x27;楼层&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 独热编码函数</span></span><br><span class="line">pd.get_dummies(data[<span class="string">&#x27;楼层&#x27;</span>]) <span class="comment"># 会告诉你</span></span><br></pre></td></tr></table></figure><h3 id="映射数据"><a href="#映射数据" class="headerlink" title="映射数据"></a>映射数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 映射函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>(data[<span class="string">&#x27;等宽划分距离&#x27;</span>].iloc[<span class="number">0</span>])</span><br><span class="line">data[<span class="string">&#x27;等宽划分距离&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">str</span>(x)) <span class="comment"># 使用cut得到的是区间，不是字符串，这个可以转化为字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据字典进行映射</span></span><br><span class="line">dis = &#123;<span class="string">&#x27;(0,500]&#x27;</span>.<span class="string">&#x27;近&#x27;</span>,<span class="string">&#x27;(500,1000]&#x27;</span>.<span class="string">&#x27;较近&#x27;</span>,<span class="string">&#x27;(1000,2000]&#x27;</span>.<span class="string">&#x27;远&#x27;</span>,&#125;</span><br><span class="line">data[<span class="string">&#x27;等宽划分距离&#x27;</span>].<span class="built_in">map</span>(dis) <span class="comment"># 根据字典进行替换</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> 数据预处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Datapreprocess1</title>
      <link href="/2025/03/24/Datapreprocess1/"/>
      <url>/2025/03/24/Datapreprocess1/</url>
      
        <content type="html"><![CDATA[<h3 id="都有什么？"><a href="#都有什么？" class="headerlink" title="都有什么？"></a>都有什么？</h3><ul><li>标准化与归一化</li><li>数据离散化</li><li>独热编码</li><li>数据映射</li></ul><h3 id="一、标准化与归一化"><a href="#一、标准化与归一化" class="headerlink" title="一、标准化与归一化"></a>一、标准化与归一化</h3><ol><li>为什么？<br> 多指标评价体系中，由于各个评价指标的性质不同，通常有不同的量纲和数量级。当各指标的水平相差很大时，如果直接使用原始指标值进行分析，会突出数值较高的指标在综合分析中的作用，相对削弱了数值水平较低指标的作用。因此，为了保证结果的可靠性，需要对原始指标数据进行标准化处理。<br> 这种处理方式得到的信息不会发生变化。只改变了量纲。<br> 比如，房价和看房人数，房价数量级在W级别，但人在个位数，这样则导致了房价对某量影响更大，但显然不合理。   <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/标准化.png" alt="<center>标准化"/></div><span class="image-caption"><center>标准化</span></div> <div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/归一化.png" alt="<center>归一化"/></div><span class="image-caption"><center>归一化</span></div></li></ol><h3 id="二、离散化"><a href="#二、离散化" class="headerlink" title="二、离散化"></a>二、离散化</h3><ol><li>分类    <ul><li>分段离散化：人为确定类别，然后让数据入座</li><li>等频离散化：不人为指定，只告诉分为多少组，自动分类。</li></ul></li></ol><h3 id="三、独热编码"><a href="#三、独热编码" class="headerlink" title="三、独热编码"></a>三、独热编码</h3><ol><li>是什么？  <ul><li>One-Hot码，一位有效码；该方法是用N位状态寄存器表达N个状态，且只有一位有效。</li><li>将文字变为编码</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> 数据预处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Datawash4</title>
      <link href="/2025/03/24/Datawash4/"/>
      <url>/2025/03/24/Datawash4/</url>
      
        <content type="html"><![CDATA[<h3 id="零、导入库"><a href="#零、导入库" class="headerlink" title="零、导入库"></a>零、导入库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;111.xlsx&#x27;</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><h3 id="一、三倍标准判断"><a href="#一、三倍标准判断" class="headerlink" title="一、三倍标准判断"></a>一、三倍标准判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">price_mean = data[<span class="string">&#x27;租价/月&#x27;</span>].mean()</span><br><span class="line"><span class="comment"># 计算标准差</span></span><br><span class="line">price_std = data[<span class="string">&#x27;租价/月&#x27;</span>].std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义超出均值的三倍标准差范围就是异常值</span></span><br><span class="line">price_min = price_mean - <span class="number">3</span>*price_std</span><br><span class="line">price_max = price_mean + <span class="number">3</span>*price_std</span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;租价/月&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:(x &gt; price_max) <span class="keyword">or</span> (x &lt; price_min)) <span class="comment"># 匿名函数判断这一列里面是否是异常值，返回布尔值</span></span><br><span class="line">data[data[<span class="string">&#x27;租价/月&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:(x &gt; price_max) <span class="keyword">or</span> (x &lt; price_min))] <span class="comment"># 提取出异常值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理异常值</span></span><br><span class="line">ls1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    x = data[<span class="string">&#x27;租价/月&#x27;</span>].iloc[i]</span><br><span class="line">    <span class="keyword">if</span> x &lt; price_min:</span><br><span class="line">        ls1.append(price_min)</span><br><span class="line">    <span class="keyword">elif</span> x &gt; price_max:</span><br><span class="line">        ls1.append(price_max)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ls1.append(x)</span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;三倍标准差（覆盖法）&#x27;</span>] = ls1 <span class="comment"># 在最后添加新列</span></span><br></pre></td></tr></table></figure><h3 id="二、四分位数判断"><a href="#二、四分位数判断" class="headerlink" title="二、四分位数判断"></a>二、四分位数判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算25分位</span></span><br><span class="line">price_25 = data[<span class="string">&#x27;租价/月&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line"><span class="comment"># 计算75分位</span></span><br><span class="line">price_75 = data[<span class="string">&#x27;租价/月&#x27;</span>].quantile(<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义超出上下分位1.5IQR（1.5倍上下分位之差）范围就是异常值</span></span><br><span class="line">price_min = price_25 - <span class="number">1.5</span>*(price_75 - price_25)</span><br><span class="line">price_max = price_25 + <span class="number">1.5</span>*(price_75 - price_25)</span><br><span class="line"></span><br><span class="line">data[data[<span class="string">&#x27;租价/月&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:(x &gt; price_max) <span class="keyword">or</span> (x &lt; price_min))] <span class="comment"># 提取出异常值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理异常值</span></span><br><span class="line">ls1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    x = data[<span class="string">&#x27;租价/月&#x27;</span>].iloc[i]</span><br><span class="line">    <span class="keyword">if</span> x &lt; price_min:</span><br><span class="line">        ls1.append(np.nan) <span class="comment"># 也可以设置成缺失值</span></span><br><span class="line">    <span class="keyword">elif</span> x &gt; price_max:</span><br><span class="line">        ls1.append(np.nan)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ls1.append(x)</span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;分位法&#x27;</span>] = ls1 <span class="comment"># 在最后添加新列</span></span><br><span class="line">data[data[<span class="string">&#x27;分位法&#x27;</span>].isnull()]</span><br><span class="line"></span><br><span class="line">data2 = data[data[<span class="string">&#x27;分位法&#x27;</span>].notnull()] <span class="comment"># 清除nan</span></span><br><span class="line">data2 = data[<span class="string">&#x27;分位法&#x27;</span>].fillna(data[<span class="string">&#x27;分位法&#x27;</span>.mean()]) <span class="comment"># 或者用均值填补</span></span><br></pre></td></tr></table></figure><h3 id="三、字符串处理（补充）"><a href="#三、字符串处理（补充）" class="headerlink" title="三、字符串处理（补充）"></a>三、字符串处理（补充）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = data[<span class="string">&#x27;名称&#x27;</span>].iloc[<span class="number">0</span>] <span class="comment"># 提取字符串</span></span><br><span class="line"><span class="string">&#x27;西武学园 1室1厅1卫 40m² 3100元&#x27;</span></span><br><span class="line"></span><br><span class="line">s.split(<span class="string">&#x27; &#x27;</span>) <span class="comment"># 用空格分开</span></span><br><span class="line">s.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>] <span class="comment"># 即可提取第一个信息</span></span><br><span class="line">data[<span class="string">&#x27;名称&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]) <span class="comment"># 提取所有的第一个信息</span></span><br><span class="line">data[<span class="string">&#x27;名称&#x27;</span>].apply(<span class="keyword">lambda</span> x:x.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]) <span class="comment"># 类似，区别是apply放不了字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更详细的取值</span></span><br><span class="line">s.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;室&#x27;</span>)[<span class="number">0</span>] <span class="comment"># 即可取出卧室数，用float即可获取数字</span></span><br><span class="line">data[<span class="string">&#x27;名称&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:s.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;室&#x27;</span>)[<span class="number">0</span>]) <span class="comment"># 完全获取</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> 数据清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Datawash3</title>
      <link href="/2025/03/24/Datawash3/"/>
      <url>/2025/03/24/Datawash3/</url>
      
        <content type="html"><![CDATA[<h3 id="零、导入库"><a href="#零、导入库" class="headerlink" title="零、导入库"></a>零、导入库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;111.xlsx&#x27;</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><h3 id="一、重复查看"><a href="#一、重复查看" class="headerlink" title="一、重复查看"></a>一、重复查看</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看重复数据</span></span><br><span class="line">data[data.duplicated()]</span><br></pre></td></tr></table></figure><h3 id="二、重复值删除"><a href="#二、重复值删除" class="headerlink" title="二、重复值删除"></a>二、重复值删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除方法一</span></span><br><span class="line">data[data[<span class="string">&#x27;名称&#x27;</span>] == <span class="string">&#x27;氮化镓器件性能&#x27;</span>] <span class="comment"># 查看这个条目的重复数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留出现的第一个</span></span><br><span class="line">data1 = data.drop_duplicates(keep = <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"><span class="comment"># 保留出现的最后一个</span></span><br><span class="line">data2 = data.drop_duplicates(keep = <span class="string">&#x27;last&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除方法二</span></span><br><span class="line">data.drop_duplicates(keep = <span class="string">&#x27;last&#x27;</span>,subset = <span class="string">&#x27;名称&#x27;</span>) <span class="comment"># 以某一列为标准删除重复值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> 数据清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Datawash2</title>
      <link href="/2025/03/23/Datawash2/"/>
      <url>/2025/03/23/Datawash2/</url>
      
        <content type="html"><![CDATA[<h3 id="零、准备工作"><a href="#零、准备工作" class="headerlink" title="零、准备工作"></a>零、准备工作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;111.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取前五行</span></span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><h3 id="一、查看各维度缺失值情况"><a href="#一、查看各维度缺失值情况" class="headerlink" title="一、查看各维度缺失值情况"></a>一、查看各维度缺失值情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看size的缺失值</span></span><br><span class="line">data[<span class="string">&#x27;size&#x27;</span>].isnull()</span><br><span class="line"><span class="comment"># 提取出来</span></span><br><span class="line">data[data[<span class="string">&#x27;size&#x27;</span>].isnull()]</span><br><span class="line"><span class="comment"># 看看多少个</span></span><br><span class="line"><span class="built_in">len</span>(data[data[<span class="string">&#x27;size&#x27;</span>].isnull()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量获取每一列缺失值情况</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> data.columns:</span><br><span class="line">    df = data[data[column].isnull()]</span><br><span class="line">    <span class="built_in">print</span>(column,<span class="string">&#x27;缺失值个数为：&#x27;</span>,<span class="built_in">len</span>(df),<span class="string">&#x27;缺失值占比为：&#x27;</span>,<span class="built_in">len</span>(df)/<span class="built_in">len</span>(data))</span><br><span class="line"><span class="comment"># 当某一个元素缺失的时候并不是“NaN”，即在excel里面为空，如“暂无数据”,需要做if elif else。</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> data.columns:</span><br><span class="line">    <span class="keyword">if</span> column != <span class="string">&#x27;最近地铁距离&#x27;</span>:</span><br><span class="line">        df = data[data[column].isnull()]</span><br><span class="line">        <span class="built_in">print</span>(column,<span class="string">&#x27;缺失值个数为：&#x27;</span>,<span class="built_in">len</span>(df),<span class="string">&#x27;缺失值占比为：&#x27;</span>,<span class="built_in">len</span>(df)/<span class="built_in">len</span>(data))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = data[data[column] == <span class="string">&#x27;暂无数据&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(column,<span class="string">&#x27;缺失值个数为：&#x27;</span>,<span class="built_in">len</span>(df),<span class="string">&#x27;缺失值占比为：&#x27;</span>,<span class="built_in">len</span>(df)/<span class="built_in">len</span>(data))</span><br></pre></td></tr></table></figure><h3 id="二、删除缺失值"><a href="#二、删除缺失值" class="headerlink" title="二、删除缺失值"></a>二、删除缺失值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除全部缺失值，一行删掉，但“暂无数据”删不掉</span></span><br><span class="line">df1 = data.dropna()</span><br><span class="line"><span class="comment"># 返工一下，即可取出剩下的“暂无数据”</span></span><br><span class="line">df2 = df1[df1[<span class="string">&#x27;最近地铁距离&#x27;</span>] != <span class="string">&#x27;暂无数据&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除某一列缺失值比较严重的column</span></span><br><span class="line">df3 = data.drop(<span class="string">&#x27;XXX&#x27;</span>,axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="三、缺失值填充"><a href="#三、缺失值填充" class="headerlink" title="三、缺失值填充"></a>三、缺失值填充</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 均值填充</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;房屋面积&#x27;</span>].mean())</span><br><span class="line">df4 = data[<span class="string">&#x27;房屋面积&#x27;</span>].fillna(data[<span class="string">&#x27;房屋面积&#x27;</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(df4.isnull()) <span class="comment"># 可以检查是否完全填充</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中位数填充</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;房屋面积&#x27;</span>].median())</span><br><span class="line">df5 = data[<span class="string">&#x27;房屋面积&#x27;</span>].fillna(data[<span class="string">&#x27;房屋面积&#x27;</span>].mediann())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 众数填充，对于非数字类型的可以用</span></span><br><span class="line">data[<span class="string">&#x27;楼层&#x27;</span>].mode() <span class="comment"># 但输出的时候带有标签，不能直接用</span></span><br><span class="line">data[<span class="string">&#x27;楼层&#x27;</span>].mode().values[<span class="number">0</span>] <span class="comment"># 即可只输出文字</span></span><br><span class="line">df7 = data[<span class="string">&#x27;楼层&#x27;</span>].fillna(data[<span class="string">&#x27;楼层&#x27;</span>].mode().values[<span class="number">0</span>]) <span class="comment"># 实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另：若缺失值的形式不是“NaN”，而是“暂无数据”这种</span></span><br><span class="line">data[<span class="string">&#x27;最近地铁距离&#x27;</span>] = data[<span class="string">&#x27;最近地铁距离&#x27;</span>].replace(<span class="string">&#x27;暂无数据&#x27;</span>,np.nan) <span class="comment"># 先替换成NaN就行了</span></span><br><span class="line">data[<span class="string">&#x27;最近地铁距离&#x27;</span>].fillna(data[<span class="string">&#x27;最近地铁距离&#x27;</span>.mean()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前向填充</span></span><br><span class="line">df8 = data.[<span class="string">&#x27;最近地铁距离&#x27;</span>].fillna(method = <span class="string">&#x27;ffill&#x27;</span>) <span class="comment"># 有现成的方法可以用</span></span><br><span class="line">data.[<span class="string">&#x27;最近地铁距离&#x27;</span>].fillna(method = <span class="string">&#x27;ffill&#x27;</span>).iloc[:<span class="number">20</span>] <span class="comment"># 查看前二十个是否成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后向填充</span></span><br><span class="line">df9 = data.[<span class="string">&#x27;最近地铁距离&#x27;</span>].fillna(method = <span class="string">&#x27;bfill&#x27;</span>) <span class="comment"># 后向同理</span></span><br><span class="line">df10 = data.[<span class="string">&#x27;最近地铁距离&#x27;</span>].fillna(method = <span class="string">&#x27;bfill&#x27;</span>,limit = <span class="number">1</span>) <span class="comment"># 有连续三个nan，限定只后向填充一个，即只填一个</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> 数据清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib1</title>
      <link href="/2025/03/22/matplotlib1/"/>
      <url>/2025/03/22/matplotlib1/</url>
      
        <content type="html"><![CDATA[<h3 id="零、准备工作"><a href="#零、准备工作" class="headerlink" title="零、准备工作"></a>零、准备工作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><ol><li>mat → MATLAB<br> plot → 做图<br> lib → 库<br> 提供了强大的可视化功能</li><li>作图要有自变量、因变量、函数  </li></ol><h3 id="一、折线图"><a href="#一、折线图" class="headerlink" title="一、折线图"></a>一、折线图</h3><ol><li>作图基本操作  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">100</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">plt.plot(x,y) </span><br><span class="line"><span class="comment"># 即可输出图像，但可视化效果并不好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像美化</span></span><br><span class="line">x = np.arange(<span class="number">100</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">y2 = -<span class="number">2</span>*x - <span class="number">1</span> <span class="comment"># 多曲线</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>)) <span class="comment"># 设定图像大小</span></span><br><span class="line"></span><br><span class="line">plt.plot(x,y1,<span class="string">&#x27;-.&#x27;</span>,color=<span class="string">&#x27;r&#x27;</span>,linewidth=<span class="number">6</span>) <span class="comment"># 设定线的样式</span></span><br><span class="line">plt.plot(x,y2,<span class="string">&#x27;-.&#x27;</span>,color=<span class="string">&#x27;r&#x27;</span>,linewidth=<span class="number">6</span>) <span class="comment"># 多条曲线 </span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;independent variable&#x27;</span>,fontsize=<span class="number">16</span>) <span class="comment"># 横坐标名称</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;dependent variable&#x27;</span>,fontsize=<span class="number">16</span>) <span class="comment"># 纵坐标</span></span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>) <span class="comment"># 数字大小</span></span><br><span class="line">plt.yticks(...)</span><br><span class="line">plt.legend([<span class="string">&#x27;line1&#x27;</span>,<span class="string">&#x27;line2&#x27;</span>],fontsize=<span class="number">12</span>) <span class="comment"># 图例，按顺序来</span></span><br><span class="line">plt.title(<span class="string">&#x27;xxx&#x27;</span>,fontsize=<span class="number">12</span>) <span class="comment"># 图像名字</span></span><br><span class="line"></span><br><span class="line">plt.grid() <span class="comment"># 网格</span></span><br><span class="line">plt.show() <span class="comment"># 去除其他代码</span></span><br></pre></td></tr></table></figure></li><li>子图  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">100</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">y2 = -<span class="number">2</span>*x - <span class="number">1</span> </span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>)) </span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment"># 做子图，两行一列，最后一格数字是“接下来画的图在第一个画布里”</span></span><br><span class="line">plt.plot(x,y1,<span class="string">&#x27;-.&#x27;</span>,color=<span class="string">&#x27;r&#x27;</span>,linewidth=<span class="number">6</span>) </span><br><span class="line">plt.xlabel(<span class="string">&#x27;independent variable&#x27;</span>,fontsize=<span class="number">16</span>) </span><br><span class="line">plt.ylabel(<span class="string">&#x27;dependent variable&#x27;</span>,fontsize=<span class="number">16</span>) </span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>) </span><br><span class="line">plt.yticks(...)</span><br><span class="line">plt.legend([<span class="string">&#x27;line1&#x27;</span>],fontsize=<span class="number">12</span>) </span><br><span class="line">plt.title(<span class="string">&#x27;xxx&#x27;</span>,fontsize=<span class="number">12</span>) </span><br><span class="line">plt.grid() </span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>) <span class="comment"># 接下来做第二张图</span></span><br><span class="line">plt.plot(x,y2,<span class="string">&#x27;-.&#x27;</span>,color=<span class="string">&#x27;b&#x27;</span>,linewidth=<span class="number">6</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;independent variable&#x27;</span>,fontsize=<span class="number">16</span>) </span><br><span class="line">plt.ylabel(<span class="string">&#x27;dependent variable&#x27;</span>,fontsize=<span class="number">16</span>) </span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>) </span><br><span class="line">plt.yticks(...)</span><br><span class="line">plt.legend([<span class="string">&#x27;line2&#x27;</span>],fontsize=<span class="number">12</span>) </span><br><span class="line">plt.title(<span class="string">&#x27;xxx&#x27;</span>,fontsize=<span class="number">12</span>) </span><br><span class="line">plt.grid() </span><br><span class="line"></span><br><span class="line">xx == np.arange(-<span class="number">6</span>,<span class="number">6</span>,<span class="number">0.01</span>) <span class="comment"># 保证曲线的取点够多，图像够平滑</span></span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.plot(xx,np.sin(xx),<span class="string">&#x27;-.&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>,linewidth=<span class="number">6</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;independent variable&#x27;</span>,fontsize=<span class="number">16</span>) </span><br><span class="line">plt.ylabel(<span class="string">&#x27;dependent variable&#x27;</span>,fontsize=<span class="number">16</span>) </span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>) </span><br><span class="line">plt.yticks(...)</span><br><span class="line">plt.legend([<span class="string">&#x27;line3&#x27;</span>],fontsize=<span class="number">12</span>) </span><br><span class="line">plt.title(<span class="string">&#x27;xxx&#x27;</span>,fontsize=<span class="number">12</span>) </span><br><span class="line">plt.grid() </span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.plot(xx,np.cos(xx),<span class="string">&#x27;-.&#x27;</span>,color=<span class="string">&#x27;y&#x27;</span>,linewidth=<span class="number">6</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;independent variable&#x27;</span>,fontsize=<span class="number">16</span>) </span><br><span class="line">plt.ylabel(<span class="string">&#x27;dependent variable&#x27;</span>,fontsize=<span class="number">16</span>) </span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>) </span><br><span class="line">plt.yticks(...)</span><br><span class="line">plt.legend([<span class="string">&#x27;line4&#x27;</span>],fontsize=<span class="number">12</span>) </span><br><span class="line">plt.title(<span class="string">&#x27;xxx&#x27;</span>,fontsize=<span class="number">12</span>) </span><br><span class="line">plt.grid() </span><br><span class="line"></span><br><span class="line">plt.show() <span class="comment"># 只写一遍就可以</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="二、条形图"><a href="#二、条形图" class="headerlink" title="二、条形图"></a>二、条形图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Company = [<span class="string">&#x27;Samsung&#x27;</span>,<span class="string">&#x27;Huawei&#x27;</span>,<span class="string">&#x27;Apple&#x27;</span>,<span class="string">&#x27;Xiaomi&#x27;</span>,<span class="string">&#x27;OPPO&#x27;</span>,<span class="string">&#x27;VIVO&#x27;</span>,<span class="string">&#x27;Others&#x27;</span>]</span><br><span class="line">Shipment = [<span class="number">300</span>,<span class="number">240</span>,<span class="number">196</span>,<span class="number">125</span>,<span class="number">120</span>,<span class="number">114</span>,<span class="number">400</span>]</span><br><span class="line">data = pd.DataFrame(&#123;<span class="string">&#x27;Company&#x27;</span>:Company,<span class="string">&#x27;Shipment&#x27;</span>:Shipment&#125;)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.bar(data.Company,data.Shimpent,width=<span class="number">0</span>,<span class="number">5</span>,color=<span class="string">&#x27;royalblue&#x27;</span>) <span class="comment"># 条宽度</span></span><br><span class="line">plt.plot(data.Company,data.Shimpent,color=<span class="string">&#x27;r&#x27;</span>,linewidth=<span class="number">3</span>,marker=<span class="string">&#x27;o&#x27;</span>,markersize=<span class="number">10</span>) <span class="comment"># 也可以加个折线图,可以补点、调整点大小等。</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Company&#x27;</span>,fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Shipment&#x27;</span>,fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;xxx&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="三、直方图"><a href="#三、直方图" class="headerlink" title="三、直方图"></a>三、直方图</h3><ul><li>频数，适合表示频率<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>) <span class="comment"># 生成一个随机一行数组备用</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line">plt.hist(x,color = <span class="string">&#x27;royalblue&#x27;</span>) <span class="comment"># 生成频数直方图。</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正态分布直方图</span></span><br><span class="line">x = np.random.randn(<span class="number">100</span>,<span class="number">1</span>) <span class="comment"># 生成的数字越多，越接近正态分布</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line">plt.hist(x,color = <span class="string">&#x27;royalblue&#x27;</span>,bins = <span class="number">100</span>) <span class="comment"># 生成频数直方图。bins越大，越接近平滑。</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、饼图"><a href="#四、饼图" class="headerlink" title="四、饼图"></a>四、饼图</h3><ul><li>适合表示百分比<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">&#x27;share&#x27;</span>] = [i/data.Shipment.<span class="built_in">sum</span>().<span class="built_in">round</span>(<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> data.Shipment] <span class="comment"># 保留三位小数</span></span><br><span class="line">x = data.Company</span><br><span class="line">y = data.Share</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">6</span>)) <span class="comment"># 改成圆形</span></span><br><span class="line">plt.pie(y,labels = x,autopct = <span class="string">&#x27;%.1f%%&#x27;</span>,textprop = &#123;<span class="string">&#x27;fontsize&#x27;</span>:<span class="string">&#x27;x-large&#x27;</span>&#125;,labeldistance = <span class="number">1.2</span>,shadow = <span class="literal">True</span>) <span class="comment"># 以百分比形式表示，数字大小，名称距离，阴影</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> matplotlib库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Datawash1</title>
      <link href="/2025/03/22/Datawash1new/"/>
      <url>/2025/03/22/Datawash1new/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是数据清洗？"><a href="#什么是数据清洗？" class="headerlink" title="什么是数据清洗？"></a>什么是数据清洗？</h3><ol><li>包含四大情况：  <ul><li>缺失值处理</li><li>重复值处理</li><li>异常值处理</li><li>字符串处理</li></ul></li></ol><h3 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h3><ol><li>缺失原因：  <ul><li>由于数据未维护、服务器或存储故障等造成了有些数据暂时无法获取，一部分属性值空缺。  </li><li>由于人为因素缺失，如未保存。  </li><li>有些对象对于某个属性不可用，如对于未婚者的配偶姓名。  </li><li>有些信息获取代价太大，从而未获取，如爬取数据质量差，加密数据或收费数据。</li></ul></li><li>产生问题：  <ul><li>系统丢失了大量有用的信息——完整样本数减少。  </li><li>系统不确定性显著，系统中确定性成分更难把握——有效信息减少，系统平衡性受影响。  </li><li>包含空值的数据会使分析过程陷入混乱，导致不可靠的输出——有些算法或统计检验要求数据没有缺失。  </li></ul></li><li>如何解决？  <ul><li>删除缺失值：删除记录 —— 把一行删除，如果相对于样本量很少的话；删除属性 —— 80%原则，某一列确实了80%及以上的数据，删除。  </li><li>插值填补：均值，中位数，众数，特殊值（-1）；前向后向填充，填的和前面/后面一样；机器学习算法填补。  </li><li>不处理：用不到的属性；算法可以接受缺失值。</li></ul></li></ol><h3 id="重复值"><a href="#重复值" class="headerlink" title="重复值"></a>重复值</h3><ol><li>出现原因与处理方法  <ul><li>原因：爬取数据时，可能会重复爬取，获取重复数据；人为录入内容，可能重复录入。</li><li>处理方法：剔除即可</li></ul></li></ol><h3 id="异常值"><a href="#异常值" class="headerlink" title="异常值"></a>异常值</h3><ol><li>判别方法：  <ul><li>物理判别；对客观事物的已有认识。如气温100°C。</li><li>统计判别；给定置信概率和置信限。如气温35°C，对于三亚正常但对于漠河异常，要给出置信概率和置信限来判断是否去除。</li></ul></li><li>判别原则：  <ul><li>散点图 —— 点不在主要范围内。</li><li>正态分布 —— 距离平均值＞3σ √</li><li>不服从正态分布 —— 根据N被标准差</li><li>分位数判别 —— 上分位+1.5IQR、下分位-1.5IQR，设定上下界 √</li><li>模型预测 —— 聚类、回归</li></ul></li><li>处理：  <ul><li>删除异常记录</li><li>视同缺失值，用可能值填补。如中位数平均数众数、上下四分位、上下界。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/keyan/异常值示意图.png" alt="<center>异常值示意图"/></div><span class="image-caption"><center>异常值示意图</span></div></li><li>覆盖法。将超出上下界的值都替换成上下界的值。</li><li>不处理</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> 数据清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas1</title>
      <link href="/2025/03/22/pandas1/"/>
      <url>/2025/03/22/pandas1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Pandas基本数据结构"><a href="#一、Pandas基本数据结构" class="headerlink" title="一、Pandas基本数据结构"></a>一、Pandas基本数据结构</h3><ol><li>pandas的作用是在Python中处理数据表。<br> 两种常用基本结构：<ul><li>Series，一堆数据，与numpy中的一对<code>array</code>类似。如excel里面的某一列。</li><li>DataFrame，二维的表格型数据结构</li></ul></li><li>series类型  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan,<span class="number">6</span>,<span class="string">&#x27;8&#x27;</span>]) <span class="comment">#代码示意 空元素必须用np.nan</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">0</span>   <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   <span class="number">3</span></span><br><span class="line"><span class="number">2</span>   <span class="number">5</span></span><br><span class="line"><span class="number">3</span>   NaN</span><br><span class="line"><span class="number">4</span>   <span class="number">6</span></span><br><span class="line"><span class="number">5</span>   <span class="number">8</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line">s.index <span class="comment">#索引数据的行标签  </span></span><br><span class="line">s.values <span class="comment">#值  </span></span><br><span class="line">s[::<span class="number">2</span>] <span class="comment">#切片</span></span><br></pre></td></tr></table></figure></li><li>DataFrame类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line">pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">6</span>,<span class="number">4</span>)), index=<span class="built_in">range</span>(<span class="number">6</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>)) </span><br><span class="line"><span class="comment">#生成一个六行四列的表格，行0-5，列A-D，默认情况下，分别从0开始。</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="二、读取并查看数据"><a href="#二、读取并查看数据" class="headerlink" title="二、读取并查看数据"></a>二、读取并查看数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&#x27;111.xlsx&#x27;</span>) <span class="comment">#从excel里面读取数据，但文件要在和python文件同一个根目录里，或者使用完整文件目录，但要注意字符串转译，在前面加r或者反斜线。</span></span><br><span class="line">df = pd.read_excel(<span class="string">r&#x27;C:\Users\111.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;222.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, engine=<span class="string">&#x27;python&#x27;</span>) <span class="comment">#从csv里面读取，防止报错</span></span><br></pre></td></tr></table></figure><ol><li>数据信息  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.info() <span class="comment">#查看数据信息  </span></span><br><span class="line">df.head() <span class="comment">#查看前几行，默认五行  </span></span><br><span class="line">df.tail() <span class="comment">#查看倒数几行，默认五行</span></span><br></pre></td></tr></table></figure></li><li>下标、列标、数据  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.index <span class="comment">#查看下标，查看行名称  </span></span><br><span class="line">df.columns <span class="comment">#查看列名称</span></span><br></pre></td></tr></table></figure></li><li>行操作  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>:<span class="number">5</span>] <span class="comment">#取前五行，绝对顺序，从前往后的前五行  </span></span><br><span class="line">df.loc[<span class="number">0</span>:<span class="number">5</span>] <span class="comment">#取index为0 1 2 3 4 5的行，如果没有，则取不出来。右边是闭区间。 </span></span><br><span class="line">df = df.drop([<span class="number">30000</span>]) <span class="comment">#注意，这里是删除了index为30000的行，不是相对的</span></span><br><span class="line">df = df.drop([<span class="number">30000</span>,<span class="number">31111</span>])</span><br></pre></td></tr></table></figure></li><li>列操作  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df.columns</span><br><span class="line">df[<span class="string">&#x27;名字&#x27;</span>][:<span class="number">5</span>] <span class="comment">#查看名字这一列的前五个  </span></span><br><span class="line">df[[<span class="string">&#x27;名字&#x27;</span>,<span class="string">&#x27;类型&#x27;</span>]][:<span class="number">5</span>] <span class="comment">#查看名字和类型这两列的前五个  </span></span><br><span class="line">df[<span class="string">&#x27;名称&#x27;</span>] = <span class="built_in">range</span>(<span class="built_in">len</span>(df)) <span class="comment">#添加一列  </span></span><br><span class="line">df = df.drop(<span class="string">&#x27;名称&#x27;</span>,axis=<span class="number">1</span>)  <span class="comment">#删除 axis取1为列 取0为行 注意必须赋值给df  </span></span><br><span class="line">df.loc[[index],[columns]] <span class="comment">#通过标签选择数据</span></span><br><span class="line">df.loc[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="string">&#x27;评分&#x27;</span>,<span class="string">&#x27;名字&#x27;</span>]]</span><br></pre></td></tr></table></figure></li><li>条件选择  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;产地&#x27;</span>]==<span class="string">&#x27;中国&#x27;</span>[::<span class="number">2</span>] <span class="comment">#返回布尔值的series  </span></span><br><span class="line">df[df[<span class="string">&#x27;产地&#x27;</span>]==<span class="string">&#x27;中国&#x27;</span>][::<span class="number">2</span>] <span class="comment">#布尔索引，参考格式  </span></span><br><span class="line">df[(df.产地==<span class="string">&#x27;中国&#x27;</span>)|(df.产地==<span class="string">&#x27;中国&#x27;</span>)&amp;(df.评分&gt;<span class="number">9</span>)][::<span class="number">2</span>] <span class="comment">#多条件索引参考  </span></span><br></pre></td></tr></table></figure></li><li>排序  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.sort_values(by=<span class="string">&#x27;投票人数&#x27;</span>)[::<span class="number">2</span>] <span class="comment">#上小下大，升序</span></span><br><span class="line">df.sort_values(by=<span class="string">&#x27;投票人数&#x27;</span>,ascending=<span class="literal">False</span>)[::<span class="number">2</span>] <span class="comment">#降序</span></span><br></pre></td></tr></table></figure></li><li>基本统计分析  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df.describe() <span class="comment">#描述统计  </span></span><br><span class="line">df[<span class="string">&#x27;投票人数&#x27;</span>].<span class="built_in">max</span>() <span class="comment">#最大值  </span></span><br><span class="line">df[<span class="string">&#x27;投票人数&#x27;</span>].<span class="built_in">min</span>() <span class="comment">#最小值  </span></span><br><span class="line">df[<span class="string">&#x27;投票人数&#x27;</span>].mean() <span class="comment">#平均值  </span></span><br><span class="line">df[<span class="string">&#x27;投票人数&#x27;</span>].median() <span class="comment">#中位数  </span></span><br><span class="line">df[<span class="string">&#x27;投票人数&#x27;</span>].var() <span class="comment">#方差  </span></span><br><span class="line">df[<span class="string">&#x27;投票人数&#x27;</span>].std() <span class="comment">#标准差  </span></span><br><span class="line">df[<span class="string">&#x27;投票人数&#x27;</span>].<span class="built_in">sum</span>() <span class="comment">#求和  </span></span><br><span class="line">df[<span class="string">&#x27;投票人数&#x27;</span>].corr() <span class="comment">#相关系数，协方差  </span></span><br><span class="line"><span class="built_in">len</span>[df] <span class="comment">#查看总共多少行  </span></span><br><span class="line">df[<span class="string">&#x27;产地&#x27;</span>].unique() <span class="comment">#产地取出来形成一行数组，不重复  </span></span><br><span class="line"><span class="built_in">len</span>(df[<span class="string">&#x27;产地&#x27;</span>].unique()) <span class="comment">#算出来多少个产地  </span></span><br><span class="line">df[<span class="string">&#x27;年代&#x27;</span>].value_counts()[:<span class="number">5</span>] <span class="comment">#计算单一年份出现的次数，默认从大到小排序，前五个 </span></span><br></pre></td></tr></table></figure></li><li>数据保存<br> <code>df.to_excel(&#39;111_@.xlsx&#39;,index=None)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> pandas库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy1</title>
      <link href="/2025/03/21/numpy1/"/>
      <url>/2025/03/21/numpy1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、为什么要用到numpy"><a href="#一、为什么要用到numpy" class="headerlink" title="一、为什么要用到numpy"></a>一、为什么要用到numpy</h3><ol><li>是一个工具箱，专门做数据处理。</li><li>列表无法对数值进行批量运算，numpy可以提供新的数据结构，对这种新的结构进行处理即可实现。</li><li>需要有专门的库文件提供各种数值计算函数，如最大值最小值平均值。</li><li>导入一般使用<code>import numpy as np</code>用于缩写。</li></ol><h3 id="二、基础用法"><a href="#二、基础用法" class="headerlink" title="二、基础用法"></a>二、基础用法</h3><ol><li>最大值最小值平均值<br> max(a);min(a)mean(a)</li><li>从列表产生数组  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = np.array(L)</span><br></pre></td></tr></table></figure> a+1 a*2 a*a 对于数组，这些对于每一个元素的操作都可以实现。</li></ol><h3 id="三、numpy数组基础"><a href="#三、numpy数组基础" class="headerlink" title="三、numpy数组基础"></a>三、numpy数组基础</h3><ol><li>一维数组，不再多说</li><li>二维数组  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([<span class="number">1.0</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment">#产生一个三行三列的数组。当其中一个带小数点，会自动全加上。</span></span><br><span class="line">np.zeros() <span class="comment">#生成全0数组，括号里可以填“5”、“(2,3)”，分别生成一行五列、两行三列的全零数组。</span></span><br><span class="line">np.empty() <span class="comment">#生成未初始化的数组，元素随机。</span></span><br><span class="line">np.ones() <span class="comment">#生成全1数组。</span></span><br></pre></td></tr></table></figure></li><li>序列数组  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange([start],stop,[step]) <span class="comment">#左闭右开，取不到stop。</span></span><br></pre></td></tr></table></figure></li><li>随机数组  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(low,high,size) <span class="comment">#随机小数 下限 上限 数量。数量可以是“(2,3)”这样的列表，用于生成数组。</span></span><br><span class="line">np.random.randint(low,high,size) <span class="comment">#随机整数 下限 上限 数量。数量可以是“(2,3)”这样的列表，用于生成数组。</span></span><br></pre></td></tr></table></figure></li><li>数组属性  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.array(...)</span><br><span class="line">a.shape <span class="comment">#返回(n,m) 查询数组行列。</span></span><br><span class="line">a.size <span class="comment">#查看元素数量。</span></span><br><span class="line">a.dtype <span class="comment">#查看元素类型。</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="四、索引与切片"><a href="#四、索引与切片" class="headerlink" title="四、索引与切片"></a>四、索引与切片</h3><ol><li>一维数组索引  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.array(...)</span><br><span class="line">a[<span class="number">0</span>] <span class="comment">#索引第零个元素。</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">10</span> <span class="comment">#修改第零个元素。</span></span><br></pre></td></tr></table></figure></li><li>一维数组切片  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#左闭右开。</span></span><br><span class="line">a[<span class="number">1</span>:-<span class="number">2</span>] <span class="comment">#支持负数，取到倒数第三个数。</span></span><br><span class="line">a[::<span class="number">2</span>] <span class="comment">#支持省略，三个数表示起始、终止、步长。-1表示反着来。</span></span><br></pre></td></tr></table></figure></li><li>二维数组索引  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.randint(<span class="number">1</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">a[<span class="number">1</span>,<span class="number">3</span>] <span class="comment">#序号从0开始记。</span></span><br><span class="line">a[<span class="number">1</span>] <span class="comment">#索引第一行。</span></span><br><span class="line">a[:,<span class="number">1</span>] <span class="comment">#索引第一列。</span></span><br></pre></td></tr></table></figure></li><li>二维数组切片  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>,<span class="number">3</span>:<span class="number">5</span>] <span class="comment">#第零行的编号3、4元素。</span></span><br><span class="line">a[-<span class="number">2</span>:,-<span class="number">2</span>:] <span class="comment">#取最后两行最后两列。</span></span><br><span class="line">a[:,<span class="number">3</span>] <span class="comment">#第三行</span></span><br><span class="line">a[<span class="number">3</span>::<span class="number">2</span>,::<span class="number">2</span>] <span class="comment">#取出第三行开始没两个的行以及0、2、4列的交点。</span></span><br></pre></td></tr></table></figure></li><li>切片的本质是引用。<br> 切片在内存中使用的是引用机制。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arrary([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = a[<span class="number">2</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure> 引用机制意味着，没有为b分配新的存储地址，这时，当b改变，a也会改变。省空间。<br> 但这种现象在列表不存在。<br> 可以使用copy()的方法产生复制，用于申请新的内存。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a[<span class="number">2</span>:<span class="number">4</span>].copy()</span><br></pre></td></tr></table></figure></li></ol><h3 id="五、花式索引"><a href="#五、花式索引" class="headerlink" title="五、花式索引"></a>五、花式索引</h3><ol><li><p>一维花式索引<br> index索引：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>) <span class="comment">#连续的0到90。  </span></span><br><span class="line">index = [<span class="number">1</span>,<span class="number">2</span>,-<span class="number">3</span>] <span class="comment">#index是一个列表。  </span></span><br><span class="line">Y = a[index] <span class="comment">#取出编号1 2 -3的元素组成数组。不论是列表还是数组都可以这样取值。</span></span><br></pre></td></tr></table></figure><p> 布尔索引：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.randint(<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>)  </span><br><span class="line">b = a&gt;<span class="number">5</span> <span class="comment">#这时候b是一个数组，包含有布尔值的数组。  </span></span><br><span class="line">a[b] <span class="comment">#即可取出所有大于5的元素。  </span></span><br></pre></td></tr></table></figure></li><li>二维花式索引  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)] <span class="comment">#取出第零行第一个、第一行第二个...</span></span><br><span class="line">a[a%<span class="number">2</span> == <span class="number">0</span>] <span class="comment">#布尔索引，取出所有偶数，但取出的是一维数组。</span></span><br></pre></td></tr></table></figure><ul><li>注意一下，花式索引取出的b，是一个复制而不是引用。</li></ul></li><li>where语句  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.where(a &gt; <span class="number">10</span>) <span class="comment">#返回一个元组，包含了索引的位置。</span></span><br><span class="line">a[np.where(a &gt; <span class="number">10</span>)] <span class="comment">#返回数组，包含符合要求的元素。当然，直接用`a[a&gt;10]`也可以，但这属于是布尔索引了。</span></span><br></pre></td></tr></table></figure><h3 id="六、元素计算"><a href="#六、元素计算" class="headerlink" title="六、元素计算"></a>六、元素计算</h3></li><li>加减乘除，幂运算指数运算<br> <code>a+1 a**2 2**a</code>…<br> 还有个<code>np.exp(a)</code>，e的多少次方。</li><li>常用numpy方法<br> <code>a*b</code> 数组点乘。表示求矩阵内积。<br> <code>np.pi</code>→π，<code>np.sin(a)</code>，可以求三角函数。</li><li>限定小数位数<br> <code>np.round(a,2)</code> 限定两位小数</li><li>reshape<br> 当a是一个一行12列的。<br> <code>a.reshape(3,4)</code> 在并不改变原数组的情况下，输出一个三行四列的数组，可以赋值给其他变量。</li><li>数组排序<br> <code>arr = np.random.randint(1,100,size=(5,4))</code><br> sort会使原本的数组发生变化。<br> <code>arr.sort(1)</code> 对每一行在本行内排序。<br> <code>arr.sort(0)</code> 对每一列在本列内排序。  <ul><li>调用方式的小tips：对numpy的数组数据而言，np.function(array)和array.function()是等效的，dot、reshape、sort、copy、sum、cumsum、max、min、mean、std等同理。但是，对于mean，np.mean()可以处理数组和列表，a.mean()只能处理数组。</li></ul></li><li>数组转置  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>)  </span><br><span class="line">b = a.reshape(<span class="number">2</span>,<span class="number">5</span>) <span class="comment">#变成两行五列。  </span></span><br><span class="line">c = b.transpose() <span class="comment">#行列互换，编程五行两列。也可以用c = b.T。单一个b.T和reshape一样，无法变成新的，赋值到c才可以。</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> numpy库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《集成电路材料科学与工程基础》第六章</title>
      <link href="/2025/03/01/ICMfundamental/"/>
      <url>/2025/03/01/ICMfundamental/</url>
      
        <content type="html"><![CDATA[<h1 id="《集成电路材料科学与工程基础》第六章随笔"><a href="#《集成电路材料科学与工程基础》第六章随笔" class="headerlink" title=" 《集成电路材料科学与工程基础》第六章随笔"></a><center> <em>《集成电路材料科学与工程基础》第六章随笔</em></h1><ul><li>书籍信息：《集成电路材料科学与工程基础》 科学出版社 ISBN 978-7-03-071423-7 </li><li>第六章包含：集成电路基础、集成电路制造工艺以及集成电路材料与工艺</li><li>前五章内容为材料科学基础内容，包含绪论、材料结构基础、材料组成与结构、材料的性能以及材料的制备与成型加工，本文不再赘述，有需求请另外修习。</li></ul><hr><h2 id="6-1-集成电路制造工艺"><a href="#6-1-集成电路制造工艺" class="headerlink" title="6.1 集成电路制造工艺"></a>6.1 集成电路制造工艺</h2><ol><li>集成电路（IC）<br> 一种微型电子器件或部件。将电路所需的晶体管、电阻、电容和电感等元件通过布线互连，集成在一小块或几小块半导体晶片或其他介质上，然后封装在一个管壳内，成为具有所需电路功能的微型器件。</li><li>集成电路产业链<br> 单晶硅生产、IC设计、IC芯片生产、封测等环节。<br> <strong>单晶硅生产：</strong>粗硅制备、提纯、单晶拉制、切片、磨片、抛光。<br> <strong>IC设计：</strong>根据功能要求设计出集成电路的结构和分层布线的方案、版图。<br> <strong>IC芯片生产：</strong>通过扩散、注入、淀积薄膜、光刻等过程形成芯片。<br> <strong>封测：</strong>对芯片进行封装、引出芯片电极、性能筛选、合格品达标出厂。</li></ol><h2 id="6-2-集成电路衬底材料与工艺"><a href="#6-2-集成电路衬底材料与工艺" class="headerlink" title="6.2 集成电路衬底材料与工艺"></a>6.2 集成电路衬底材料与工艺</h2><h3 id="6-2-1-半导体材料基础"><a href="#6-2-1-半导体材料基础" class="headerlink" title="6.2.1 半导体材料基础"></a>6.2.1 半导体材料基础</h3><ol><li>如何导电？——能带理论。<br> 价带、禁带、导带<br> 满带、半满带、空带</li><li>根据导电性不同对材料进行分类<br> 导体、绝缘体、半导体<br> 重点讲解半导体：<br> 半导体的电导率介于导体与绝缘体之间，通过空穴和电子导电，而金属中只有电子一种载流子。<br> 2.1 <strong>本征半导体：</strong>可以分为元素本征半导体与化合物本证半导体。电导率由材料本身决定。<br> 2.2 <strong>非本征半导体：</strong>主要分为P型半导体和N型半导体。电导率主要取决于杂质，是杂质掺入本征半导体材料中形成的固溶体。温度也会影响电导率。  </li><li>PN结<br> P、N型半导体接触，在交界面处形成所谓的PN结<br> <strong>制造PN结的工艺：</strong> 可以分为合金法与扩散法，个人认为扩散法更加重要。<br> <strong>扩散法：</strong><br> 在n型单晶硅片上，通过氧化、光刻、扩散等工艺制得的PN结，因此也叫做扩散结，其杂质分布是由扩散过程以及杂质补偿决定的。杂质浓度从一侧到另一侧是逐渐变化的，因此也叫做缓变结。  <ul><li>半导体制造中，PN结的深度和精度是关键，特别是随着器件的小型化、集成化，精确控制PN结中杂质浓度的能力称为了芯片制造一大挑战。  </li></ul></li></ol><h3 id="6-2-2-衬底材料的分类"><a href="#6-2-2-衬底材料的分类" class="headerlink" title="6.2.2 衬底材料的分类"></a>6.2.2 衬底材料的分类</h3><ol><li>按照演进过程可以分为三代：<br> <strong>第一代：</strong> 以硅、锗等元素半导体材料为代表的第一代，奠定了微电子产业的基础。<br> <strong>第二代：</strong> 以砷化镓（GaAs）和磷化铟（InP）等化合物材料为代表的第二代，奠定信息产业的基础。<br> <strong>第三代：</strong> 以氮化镓（GaN）与碳化硅(SiC)等宽禁带半导体材料为代表的第三代，支撑战略性新兴产业的发展。  <ul><li>2017年，95%以上的半导体器件和99%以上的集成电路采用硅作为衬底材料，化合物半导体市场占比5%以内，硅衬底年销售额87亿美元，GaAs约8亿，GaN约1亿，SiC约3亿。  </li></ul></li><li>硅衬底<br> 主流硅片尺寸在300mm（12英寸）、200mm（8英寸）以及150mm（6英寸）。其中12英寸在2022年就已经在硅片市场超过80%份额，是硅片市场首要产品。<br> <strong>硅片主要供应商：</strong> 日本的信越化学和盛高、中国台湾的环球晶圆、德国的siltronic以及韩国的SK siltron。五大厂商占据全球94%的市场份额（截止到2022年）。<br> <strong>大陆情况：</strong> 截止到2022年中旬，硅片生产商较为零散并且主要产品集中在6—8英寸，12英寸晶圆的研发和生产处于起步阶段。当前，有研半导体、浙江金瑞泓、天津中环、洛阳麦克斯、合晶/晶盟、中环环欧等公司可以批量供应6英寸硅片，可满足国内小尺寸硅片市场需求。对于8英寸，浙江金瑞泓、有研半导体、上海新昇等拥有一定的产品力。对于12英寸，上海新昇、有研半导体等少量企业能够供给适用于28nm以上工艺节点的硅片产线。<ul><li>经搜索，截止到2025年3月6日，综合网络上内容，在12英寸硅片上，奕斯伟材料（西安）、沪硅产业（上海新昇）、中环股份、立昂微、有研硅（山东有研艾斯）已形成一定规模，8英寸和6英寸硅片上，工艺更成熟，产量更高。  </li></ul></li><li>GaAs衬底<br> 半绝缘高阻砷化镓抛光片和外延片衬底具有高功率和高线性度的特点，在射频应用领域占有一定的市场份额。<br> 具体市场情况待施工。  </li><li>InP衬底<br> 磷化铟衬底是数据通信收发器不可或缺的材料。  </li><li>GaN衬底<br> 氮化镓体单晶的生长需要高温、高压等极端的物理条件，因此不能使用传统晶体生长方法直接合成。<br> 市场状况待更新…   </li><li>SiC衬底<br> 碳化硅衬底在电力电子和微波射频领域具有广阔的应用前景。  </li></ol><h3 id="6-2-3-衬底材料的制备原理与加工工艺"><a href="#6-2-3-衬底材料的制备原理与加工工艺" class="headerlink" title="6.2.3 衬底材料的制备原理与加工工艺"></a>6.2.3 衬底材料的制备原理与加工工艺</h3><ol><li><p>直拉法制备单晶硅<br> 1.1 <strong>单晶硅</strong>也称硅单晶，是电子信息材料中的基础材料，属于半导体材料类。常温下化学性质稳定，不溶于单一的强酸，易溶于碱。高温下化学性质活泼，能与多种元素化合。并且，硅的禁带宽度和电子迁移率适中，硅器件的最高工作温度可达250°C。初次之外，硅材料资源丰富，又无毒，较易制作大直径无位错低微缺陷的单晶。<br> 1.2 想要制造单晶硅，需要先从自然中提取出多晶硅——多晶硅可以分为冶金级（工业硅）、太阳能级和电子级。（一般是根据硅的纯度来分级的。<br> <strong>冶金级硅（MG）：</strong>由硅的氧化物在电弧炉中碳还原制成。一般含硅量90%以上，甚至高达99.8%。<br> <strong>太阳能级硅（SG）：</strong>纯度介于冶金级硅和电子级硅之间，未有明确界定，一般认为含硅量99.99%-99.9999%（4-6个9）。<br> <strong>电子级硅（EG）：</strong>一般要求含硅量大于5N以上（5个9），超高纯度达到9N-11N(9-11个9)，导电性介于10^-4 - 10^10 Ωcm。<br> 1.3 多晶硅生产技术主要有改良西门子法、硅烷法和流化床法。其中改良西门子法占据了85%及以上的产量。<br> 1.4 获得多晶硅后，较为传统的方式是采用直拉法进行生产，即丘克拉斯基法。基本流程：引晶、缩颈、放肩、等径生长、收尾、降温。  </p></li><li><p>悬浮区熔法制备单晶硅  </p></li><li>磁控直拉技术</li></ol><h2 id="6-3-集成电路就工艺材料与制备工艺"><a href="#6-3-集成电路就工艺材料与制备工艺" class="headerlink" title="6.3 集成电路就工艺材料与制备工艺"></a>6.3 集成电路就工艺材料与制备工艺</h2><h3 id="6-3-1-光刻胶"><a href="#6-3-1-光刻胶" class="headerlink" title="6.3.1 光刻胶"></a>6.3.1 光刻胶</h3><ol><li>光刻胶是微细图形加工关键材料之一，由成膜树脂、感光组分、微量添加剂（染料、增粘剂等）和溶剂等组分组成的对光明敏感的混合液体。具有纯度高、工艺复杂、生产与检测设备投资大、技术积累时间长等特征，属于资本技术双密集型产业。<br> 1.1 光刻胶市场状况：随着光刻工艺的发展，目前常用工艺节点在G线（436nm）、I线（365nm）、KrF（248nm）、ArF(193nm)以及最先进的EUV（13.5nm），其中G/I线光刻胶占比24%，KrF占比22%，ArF占比41%（截止到2022年中）可以预见，在读者读到这篇文章时，EUV光刻胶一定已经在市场拥有不可替代的地位。<br> 1.2 光刻胶供应情况：主要被美企、日企垄断，日本的JSR、东京应化、住友化学、信越化学，美国的罗门哈斯等。目前，国内企业正不断向着28nm及以下的工艺节点发展，对于高端光刻胶，仍处于受制于人，国产化率低的状况。  <ul><li>我国光刻胶的发展面临着高纯光刻胶原材料的国产化问题。高端光刻胶所需的树脂主体材料、光敏剂、抗反射涂层等基本依赖进口。  </li></ul></li></ol><h3 id="6-3-2-掩膜版"><a href="#6-3-2-掩膜版" class="headerlink" title="6.3.2 掩膜版"></a>6.3.2 掩膜版</h3><ol><li>掩膜版就像胶片，在行业中有着特殊的地位。<br> 1.1 掩膜版市场情况：通常，芯片制造厂都有配套的专业掩膜版工厂。据统计，先进芯片厂附属的掩膜版厂的收入占据了这个市场的流程。另外，对于非先进制程，特别是60、90nm以上制程的产品，掩膜版外包趋势明显，这个工艺制程下，独立掩膜版制造厂的市场比较高。<br> 1.2 掩膜版的主要原材料包括掩模基板、掩膜保护膜等。基板通常是高纯度、低反射率、低热膨胀系数的石英玻璃，成本占到掩膜版原材料的90%左右。我国国内尚不具备制造高档高纯石英掩模基板的能力。掩膜保护膜可以起到增加良率，减少掩膜版清洗次数与磨损的作用，这种保护膜可以降低光刻工艺的成本，主要被美国日本垄断。  </li></ol><h3 id="6-3-3-工艺化学品"><a href="#6-3-3-工艺化学品" class="headerlink" title="6.3.3 工艺化学品"></a>6.3.3 工艺化学品</h3><ol><li>高纯化学工艺品主要包括无机酸类、无机碱类、有机溶剂类等通用化学品以及配方型化学品。通常用于芯片生产中的清洗、光刻、刻蚀、显影、互联等工艺。  </li><li>在集成电路行业，对于高纯化学试剂的微量金属杂质含量、颗粒粒径数量、阴离子杂质含量等方面有严格要求。根据SEMI标准，应用在集成电路领域的高纯化学品集中在Grade 3、Grade 4水平，并且随着线宽越窄，标准越高，纯度和洁净度的要求越高。  </li></ol><h3 id="6-3-4-电子气体"><a href="#6-3-4-电子气体" class="headerlink" title="6.3.4 电子气体"></a>6.3.4 电子气体</h3><ol><li>在集成电路制造业中，气体的使用非常广泛。气体的纯度和洁净度直接决定了电子元器件的质量、集成度、特定技术指标和成品率。目前，大部分气体可以达到4N以上，部分气体纯度达5N以上。在集成电路就工业中应用的有110余种气体，常用超过30种。  </li><li>按照化学成分可以分为：硅系、砷系、磷系、硼系、金属氢化物、卤化物和金属烃化物七类。按照用途可以分为：掺杂气体、外延气体、刻蚀气体、化学气相沉积气等。  </li><li>供应商内容待补充…  </li></ol><h3 id="6-3-5-抛光材料"><a href="#6-3-5-抛光材料" class="headerlink" title="6.3.5 抛光材料"></a>6.3.5 抛光材料</h3><ol><li>化学机械抛光（CMP）的抛光材料是集成电路制造业中重要的耗材，主要包括抛光液、抛光垫、修整盘等。其中抛光垫和抛光液占主要。  </li><li>抛光液：<br> 2.1 抛光液是决定CMP工艺性能最终良率的关键材料，约占整个CMP材料市场的50%，主要由纳米级研磨颗粒、化学剂和去离子水组成。针对具体工艺和被抛光材料的要求，选择不同种类的研磨颗粒（二氧化硅、三氧化二铝、二氧化铈等）、多种化学试剂（金属络合剂、表面抑制剂、氧化还原剂、分散剂以及其他助剂等）。除了CMP，抛光液也可以使用在其他前/后道的各个工序中，如FinFET栅极、浅沟道隔离、钨栓塞、铜互连等，以及，用于先进封装的硅通孔（TSV）工艺中。抛光液市场主要被欧美日国家垄断。<br> 2.2 国内外具体情况待更新…  </li></ol><h3 id="6-3-6-靶材"><a href="#6-3-6-靶材" class="headerlink" title="6.3.6 靶材"></a>6.3.6 靶材</h3><ol><li>高纯溅射靶材（包括蒸发材料）作为集成电路芯片制造过程中重要的配套材料之一。主要用于互连线、阻挡层、通孔、背面金属化层等薄膜的制备。使用的靶材原材料主要有超高纯铝及其合金，铜、钛、钽、钨、钨钛合金，镍及其合金，钴，金、银、铂及其合金等。  </li><li>分类：<br> 2.1 根据化学成分不同，溅射靶材可以分为金属靶材、合金靶材（镍铬合金、镍钴合金等）、陶瓷复合靶材（氧化物、硅化物、碳化物、硫化物等。<br> 2.2 根据应用领域不同，分为半导体芯片靶材、平面显示器靶材、太阳能电池靶材、信息存储靶材、电子器件靶材以及其他靶材。其中半导体芯片行业对于靶材的纯度、内部微观结构等方面有着最严格的标准，一般而言，纯度要求5.5N（99.9995%）以上。  </li><li>在半导体工艺中，晶圆制作和芯片封装环节都需要用到溅射靶材制备导电层、阻挡层栅极、凸点下金属层和布线层，靶材的好坏直接决定了导电性和均匀性，进而影响芯片的传输速度和稳定性。  </li><li>随着工艺制程的发展，对溅射靶材的要求只高不低，目前已有需要纯度高达6N的产线。  </li><li>国内情况：对于靶材，是我国最先打破国外垄断的产品，目前靶材行业已初具规模。 整体上，高纯靶材生产技术已跻身国际第一梯队。</li></ol><h2 id="6-4-集成电路封装材料与工艺"><a href="#6-4-集成电路封装材料与工艺" class="headerlink" title="6.4 集成电路封装材料与工艺"></a>6.4 集成电路封装材料与工艺</h2><h3 id="6-4-1-集成电路封装概念与分类"><a href="#6-4-1-集成电路封装概念与分类" class="headerlink" title="6.4.1 集成电路封装概念与分类"></a>6.4.1 集成电路封装概念与分类</h3><ol><li><strong>狭义的封装：</strong>集成电路芯片封装是指利用膜技术以及微细加工技术，将芯片及其他要素在框架或基板上布置、粘贴固定及连接，引出接线端子并通过可塑性绝缘介质灌封固定，构成整体立体结构的工艺。此概念称为狭义的封装。<br> <strong>更广意义上的“封装”：</strong>是指封装工程，即将封装体与基板连接固定，装配成完整的系统或电子设备，并确保整个系统综合性能的工程。将上述两个层次的封装的含义合并，即为广义封装概念。<br> <strong>电子封装工程：</strong>将基板技术、芯片封装体、分立器件等全部要素，按电子设备整机要求进行连接和装配，实现电子的、物理的性能，使之转变为适用于整机或系统的形式，成为整机装置或设备的工程称为电子封装工程。<br> 集成电路封装的目的：保护芯片不受或少受外界环境的影响，为之提供一个良好的工作条件，以使集成电路具有稳定、正常的功能。<br> 芯片封装后需要进行测试：一是进入封装前的晶圆测试，主要测试电性。二是封装后的IC成品测试，主要测试IC功能、电性与散热是否正常。因此集成电路的封装和测试环节的材料往往放在一起进行讨论，统称封测材料。  </li><li>芯片封装所实现的功能<br> 集成电路的封装结构应具有一定的机械强度、良好的电气性能、散热性能，以及化学稳定性。<br> 2.1 传递电能：主要是指电源电压的分配与导通。首先要接通电源，其次应根据不同部位所需的电压不同而分配合适的电压，以减少电压损耗，同时还需要考虑接地线的分配问题。<br> 2.2 传递电路信号：主要是将电信号的延迟尽可能缩小，布线时应尽可能使信号线与芯片的互联路径以及通过封装的I/O接口引出的路径最短。对于高频信号还应考虑信号的串扰。<br> 2.3 提供散热路径：主要指考虑如何将部件长时间工作产生的热量散出的问题。不同的封装结构与材料有着不同的散热效果<br> 2.4 结构保护与支持：主要指芯片封装可以为芯片和其他连接部件提供牢固可靠的机械支撑，并能适应各种工作环境和条件的变化。特别是要在极端恶劣的环境下工作的芯片，该功能显得格外重要。  </li><li>集成电路封装时应注意以下因素<br> 3.1 成本：电路在最佳性能指标下的最低价格。<br> 3.2 外形与结构：考虑到整机安装、器件布局、空间利用与外形、维修更换以及同类产品的型号替代等。<br> 3.3 可靠性：考虑到机械冲击、温度循环、加速度等对电路的机械强度，以及各种物理、化学性能产生的影响，因此必须根据产品的适用场所和环境要求，合理选用集成电路的外形和封装结构。<ul><li>除此之外，在选择具体的封装形式时，主要考虑：性能、尺寸、质量、可靠性和成本目标。其中，性能和可靠性指标在高性能芯片中考虑的比较多，对于大部分消费类应用，更多注重的是成本连同尺寸、质量的控制，使芯片可以被更广泛地应用。  </li></ul></li><li>封装技术与封装材料概述<br> 封装的形态以及使用什么技术、材料去完成，取决于产品电性、热传导、可靠性需求、材料与工艺技术、成本价格等因素决定。相同形态的封装可使用不同的技术与材料实现。<br> 4.1 封装工艺技术包括：芯片封装工艺流程、厚膜/薄膜技术、焊接材料、印刷电路板、元器件与电路板的连接、封胶材料与技术、陶瓷封装、塑料封装、气密性封装、封装可靠性工程、封装过程中的缺陷分析以及先进封装技术等。<br> 4.2 芯片封装所使用的材料：金属、陶瓷、玻璃、高分子等。其中，金属主要为电热传导材料，陶瓷和玻璃为陶瓷封装基板的主要成分，玻璃同时是重要的密封材料，高分子用于塑料封装，也是许多封装工艺的主要添加物。材料的选择也需要综合多方需求。<br> 4.3 按照封装中组合集成电路芯片的数目：可分为单芯片封装与多芯片封装。按照密封材料：可分为高分子材料和陶瓷为主。按照器件与电路板互连方式：可分为引脚插入型和表面贴装型。按照引脚分布形态：可分为单边引脚、双边引脚、四边引脚和底部引脚。  </li><li>封装技术与封装材料发展阶段<br> 虽然国际上对于划分有不同的标准，国内主要是采取封装芯片与基板连接方式划分。总体上可分为四个阶段。<br> 5.1 第一阶段：约1980年以前，插孔原件时代。<br> 5.2 第二阶段：约1980年代中期，表面贴装时代。<br> 5.3 第三阶段：约1990年，面积阵列封装时代。<br> 5.4 第四阶段：约2000年，微电子封装技术堆叠式封装时代  </li></ol><h3 id="6-4-2-集成电路封装工艺流程"><a href="#6-4-2-集成电路封装工艺流程" class="headerlink" title="6.4.2 集成电路封装工艺流程"></a>6.4.2 集成电路封装工艺流程</h3><ol><li>一般来说，芯片制造和封装不是在同一工厂内完成的，它们可能在同一工厂不同区域也可能在不同地区甚至不同国家。  </li><li>封装流程一般分为两个部分：前段操作（用塑料封装，也就是固封，之前的工艺步骤）和后段操作（固封之后） </li><li>归纳起来，芯片封装技术的基本工艺流程：硅片减薄、硅片切割、芯片贴装、芯片互连、成型技术、去飞边毛刺、切筋成型、上焊锡、打码等工序。</li><li>芯片封装技术分为四个层次：第一层次，零级，芯片级封装，芯片级集成即片上系统（SOC，System-on-Chip）芯片上的互连，得到芯片。第二层次，一级，封装级封装，封装级集成即系统级封装（SOP，System-on-Package），芯片与封装基板的互连并进行保护性包封，得到封装好的电子器件。第三层次，二级，板级封装，板级集成即板上系统（SOB，System-on-Board），将一级封装和其他电子元件安装在印制电路板表面，得到电子系统。第四层次，三级，将印制电路板组装到一个主板上，形成一个子系统。  </li><li>芯片倒装技术  </li><li>晶圆级封装PIWLP、POWLP  </li><li>TSV封装  </li><li>SiP封装  </li></ol><h3 id="6-4-3-厚膜与薄膜"><a href="#6-4-3-厚膜与薄膜" class="headerlink" title="6.4.3 厚膜与薄膜"></a>6.4.3 厚膜与薄膜</h3><ol><li>厚膜与薄膜技术是电子封装中重要的工艺技术。厚膜技术使用网印与烧结方法，薄膜技术利用镀膜、光刻与刻蚀等方法。厚膜不需要基体，薄膜只能依附在基体上。  </li><li>膜的功能：电气连接、元件搭载、表面改性。<br> 2.1 电气连接：电路板及膜与基板互为一体，元器件搭载在基板上实现与导体端子相互连接。<br> 2.2 元件搭载：焊接盘与导体端子是膜电路重要部分。并且，不论采用引线键合还是倒装片的方式，芯片的装载都需要焊接盘。元器件搭载在基板上，都依赖导体端子。<br> 2.3 表面改性：通过膜的使用可以使材料在某些性能上得到改性，比如耐磨性、抗腐蚀性等。  </li><li>薄膜技术与材料<br> 3.1 导体薄膜主要用于形成电路图形，为有源和无源器件提供金属化以及相互引线。<br> 3.2 介质薄膜具有优秀的电学性、机械电性以及光学电性，在电子元器件、光学器件、机械器件等领域有着较多的应用。成膜方法有MO、CVD、射频磁控溅射等。<br> 3.3 电阻薄膜主要方法有真空蒸镀、溅射镀膜、电镀、热分解等。其中溅射是薄膜沉积到基板上的主要方式。、<br> 3.4 薄膜制造技术主要为溅射和蒸发。二者对比，蒸发具有更快的沉积速率，但对于合金，会因为不同金属材料的蒸气压不同而难以达到较好的效果，同时。蒸发仅限于熔点较低的金属，对于难熔金属与陶瓷，是不可能通过蒸发进行沉积的。另外，若使用蒸发，氮化物和氧化物的反应沉积难以控制。<br> 3.5 电镀也是一种成膜的方法。<br> 3.6 成膜的方法可以分为干膜和湿膜。<br> 3.7 电路图形的成型方法包括：填平法、蚀刻法、掩膜法、喷砂法。  </li><li>厚膜技术与材料<br> 4.1 厚膜技术主要是指用丝网印刷的方法将导体浆料、电阻浆料或介质浆料等材料转移到陶瓷基板上，这些材料经过高温烧结，会在陶瓷电路板上形成粘附牢固的膜。  </li></ol><h3 id="6-4-4-焊接材料与工艺"><a href="#6-4-4-焊接材料与工艺" class="headerlink" title="6.4.4 焊接材料与工艺"></a>6.4.4 焊接材料与工艺</h3><ol><li>芯片封装中常用的焊接材料为焊料和锡膏，原书中这节里除了叙述这两种材料外，对助焊剂的种类和焊接表面的清洁与处理方法，以及无铅焊料在绿色封装中的应用也加以了阐述。  <ul><li>由于笔者不需要修习这部分内容，因此未进行记录，如有需求可邮件联系。  </li></ul></li></ol><h3 id="6-4-5-封胶材料与技术"><a href="#6-4-5-封胶材料与技术" class="headerlink" title="6.4.5 封胶材料与技术"></a>6.4.5 封胶材料与技术</h3><ol><li>IC芯片完成与印制电路板的模块封装后，除了焊接点、指状接合点、开关等位置外，为了使成品表面不受到外来环境因素以及后续封装工艺的损害，通常涂布一层25-125um厚的高分子涂层用于保护。</li></ol><h3 id="6-4-6-陶瓷封装"><a href="#6-4-6-陶瓷封装" class="headerlink" title="6.4.6 陶瓷封装"></a>6.4.6 陶瓷封装</h3><ol><li>陶瓷封装可以满足各种高需求的封装技术，本节主要叙述以氧化铝及其他重要陶瓷材料为封装基材的工艺技术。  </li><li>陶瓷封装简介<br> 2.1 陶瓷封装可以提供芯片气密性的密封保护，具有优良的可靠度。陶瓷在热、电、机械特性等方面极为稳定，并且可以通过改变化学成分和工艺来改变特性。陶瓷不仅可以作为封装的封盖材料，也可以作为承载基板。当今的陶瓷技术可以将烧结的尺寸变化控制在0.1%以内，可以结合厚膜印刷技术制成30-60层的多层连线传导结构，因此陶瓷也是制作多芯片组件封装基板的主要材料之一。<br> 2.2 陶瓷封装主要缺点：与塑料封装比较，工艺温度较高，成本较高；工艺自动化与薄型化封装的能力逊于塑料封装；陶瓷材料具有较高的脆性，容易导致应力损伤；</li><li>氧化铝陶瓷封装材料</li><li>陶瓷封装工艺</li><li>其他陶瓷封装材料：氮化铝等  </li></ol><h3 id="6-4-7-塑料封装材料与工艺"><a href="#6-4-7-塑料封装材料与工艺" class="headerlink" title="6.4.7 塑料封装材料与工艺"></a>6.4.7 塑料封装材料与工艺</h3><ol><li>应用范围极广，低成本、可以做薄、工艺简单、适合自动化生产。</li><li>材料与工艺不在赘述。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 辉夜の集成电路之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集成电路 </tag>
            
            <tag> 材料科学与工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Holograms插件快速入门指南</title>
      <link href="/2024/04/10/Holograms%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2024/04/10/Holograms%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<div class="note orange no-icon flat"><p>Holograms插件是经典的悬浮字插件，更多功能详见官网。🎐🎐</p></div><div class="tag link"><a class="link-card" title="Holograms" href="https://www.spigotmc.org/resources/decentholograms-1-8-1-20-4-papi-support-no-dependencies.96927/ ✨✨"><div class="left"><img src="https://blogpic-5qb.pages.dev/img/avatar/holograms.png"/></div><div class="right"><p class="text">Holograms</p><p class="url">https://www.spigotmc.org/resources/decentholograms-1-8-1-20-4-papi-support-no-dependencies.96927/ ✨✨</p></div></a></div><hr><ul><li>&lt;&gt;    必需参数。</li><li>[]    可选参数。</li><li>{}    可能值的列表。</li></ul><hr><ul><li>创建  /dh create <name> [initial content]</li></ul><hr><ul><li>添加一行  /dh line add <hologram> <page> <content></li><li>设置一行  /dh line set <hologram> <page> <line> <content></li><li>移除一行  /dh line remove <hologram> <page> <line></li></ul><hr><ul><li>加一页      /dh page add <hologram> [initial content]</li><li>删除一页  /dh page remove <hologram> <page></li><li>查看一页  /dh page switch <hologram> <page></li></ul><hr><ul><li>要允许玩家在页面之间导航，您可以简单地执行以下操作：</li><li>/dh page addaction example 1 RIGHT NEXT_PAGE</li><li>/dh page addaction example 2 LEFT PREV_PAGE</li></ul><hr><ul><li>DecentHolograms 中的渐变使用以下格式定义：</li><li><p>&lt;#00FFFF&gt;&amp;l&amp;nDECENT HOLOGRAMS&lt;/#FF00FF&gt;</p></li><li><p>DecentHolograms 中的彩虹渐变使用以下格式定义：</p></li><li><p><RAINBOW1>Rainbow Text&lt;/RAINBOW&gt;/</p></li><li><p>/dh h center <hologram></p></li><li><p>将全息影像移动到块的当前 X 和 Z 位置的中心。</p></li><li><p>/dh h movehere <hologram></p></li><li>别名：mvhr</li><li>将给定的全息影像传送到您的位置。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Minecraft服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft服务器 </tag>
            
            <tag> Holograms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python7</title>
      <link href="/2023/06/28/python7/"/>
      <url>/2023/06/28/python7/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/python/7.jpg" alt="<center>7"/></div><span class="image-caption"><center>7</span></div>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python6</title>
      <link href="/2023/06/27/python6/"/>
      <url>/2023/06/27/python6/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/python/6.jpg" alt="<center>6"/></div><span class="image-caption"><center>6</span></div>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python5</title>
      <link href="/2023/06/26/python5/"/>
      <url>/2023/06/26/python5/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/python/5.jpg" alt="<center>5"/></div><span class="image-caption"><center>5</span></div>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python4</title>
      <link href="/2023/06/25/python4/"/>
      <url>/2023/06/25/python4/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/python/4.jpg" alt="<center>4"/></div><span class="image-caption"><center>4</span></div>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3</title>
      <link href="/2023/06/24/python3/"/>
      <url>/2023/06/24/python3/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/python/3.jpg" alt="<center>3"/></div><span class="image-caption"><center>3</span></div>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python2</title>
      <link href="/2023/06/23/python2/"/>
      <url>/2023/06/23/python2/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/python/2.jpg" alt="<center>2"/></div><span class="image-caption"><center>2</span></div>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python1</title>
      <link href="/2023/06/19/python1/"/>
      <url>/2023/06/19/python1/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/python/1.jpg" alt="<center>1"/></div><span class="image-caption"><center>1</span></div>]]></content>
      
      
      <categories>
          
          <category> 辉夜の编程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程ep1</title>
      <link href="/2023/04/16/sftware-engine1/"/>
      <url>/2023/04/16/sftware-engine1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-软件的定义"><a href="#1-1-软件的定义" class="headerlink" title="1.1 软件的定义"></a>1.1 软件的定义</h1><h2 id="1-1-1什么是软件？——内涵"><a href="#1-1-1什么是软件？——内涵" class="headerlink" title="1.1.1什么是软件？——内涵"></a>1.1.1什么是软件？——内涵</h2><ul><li>软件：</li></ul><ol><li>指令的集合：通过执行这些指令可以满足预期的特征、功能和性能需求</li><li>数据结构：使得程序可以合理利用信息</li><li>软件的描述信息：以硬拷贝和虚拟形式存在用来描述程序操作和使用</li></ol><ul><li>如何理解？<ul><li>软件=代码+数据+文档</li><li>为什么需要文档？<ul><li>软件开发后交付，需要用户手册，管理员手册</li><li>软件开发新版本，需要原有的需求分析、架构设计文档。</li><li>用户操作需要</li><li><strong><em>（用户、内部沟通、产品升级等）</em></strong></li></ul></li><li>为什么要数据/数据结构？<ul><li>因为对于信息管理系统，需要存储数据的数据库，这就需要数据库模式设计</li><li>若不用数据库，往往也会有基于文件的自定义的数据存储，存储的结构比如二叉树、队列与字典等。</li></ul></li></ul></li></ul><h2 id="1-1-2什么是软件？——外延"><a href="#1-1-2什么是软件？——外延" class="headerlink" title="1.1.2什么是软件？——外延"></a>1.1.2什么是软件？——外延</h2><ul><li>软件是设计开发的，并不是传统意义上的生产制造</li><li>不会“磨损”</li><li>软件具有定制化的特点</li><li>客户化设计开发VS大规模制造<ul><li>均有设计过程</li><li>定制化 VS 统一化</li><li>开发 VS 制造 </li><li>IT工程师VS工人</li><li>由于定制，价格昂贵VS销量大反而便宜</li><li><strong><em>（不同软件的定制程度不同，如系统软件就较少，开发成本则低一些）</em></strong></li></ul></li><li>思考：<ul><li>为什么定制软件如此昂贵？</li><li>如何降低成本？</li></ul></li><li>软件的退化VS硬件的磨损<ul><li>硬件一定会磨损</li><li>软件虽然没有磨损，然会变得“不好用”</li><li>思考：软件为何经常升级？<ul><li>风格</li><li>适配</li><li>新功能</li><li>关于软件失效<div class="img-wrap"><div class="img-bg"><img class="img" src="https://blogpic-5qb.pages.dev/img/sc_swe/shixiaotu.png" alt="<center>软件失效曲线图"/></div><span class="image-caption"><center>软件失效曲线图</span></div></li><li>实际上这个软件最终会被替换掉</li></ul></li></ul></li></ul><h1 id="1-2-软件的分类"><a href="#1-2-软件的分类" class="headerlink" title="1.2 软件的分类"></a>1.2 软件的分类</h1><ul><li>系统软件<ul><li>例子<ul><li>操作系统</li><li>编译器</li><li>中间件</li><li>数据库</li><li>VMware</li></ul></li><li>特点<ul><li>系统软件和底层结合比较紧密</li><li>需要很多资源调度</li><li>变更程度小，和用户的关系不太密切</li></ul></li></ul></li><li>应用软件<ul><li>不多说，大家都在用</li></ul></li><li>工程/科学软件<ul><li>Matlab</li><li>CAD</li></ul></li><li>嵌入式软件<ul><li>冰箱内置软件</li><li>电视内置软件</li><li>等等</li><li>要求：小、性能高、可靠性需求高</li></ul></li><li>产品线软件<ul><li>软件产品线：一系列软件密集型系统，可以共享一组公共的可管理的特性，可以满足特定市场或人物的特定需求</li><li>软件产品线都使用相同的底层应用软件和数据体系结构来开发，并使用可在整个产品线进行复用的一组软件构件来实现。</li><li>软件产品线共享一组资源，包括需求、体系结构、设计模式、可重用构件、测试用例以及其他软件工程工作产品</li><li>office全家桶</li><li>adobe全家桶</li><li>ERP</li></ul></li><li>Web/移动应用软件<ul><li>Web网站特点<ul><li>美工  </li><li>内容为主</li></ul></li><li>Web应用举例<ul><li>社交</li><li>购物</li><li>邮箱</li><li>办公自动化</li></ul></li><li>语义Web…</li><li>特点<ul><li><span class='nota' data-nota='[许多WEBAPP主要功能是使用超媒体向最终用户提供文本、图片以及音频内容。]'>[数据驱动]</span></li><li><span class='nota' data-nota='[内容的质量和艺术性仍然在很大程度上决定了WEBAPP的质量]'>[内容敏感性]</span></li><li><span class='nota' data-nota='[传统应用软件是随一系列规划好的时间间隔发布而演化的，而WEB应用则持续演化]'>[持续演化]</span></li></ul></li><li>移动应用系统<ul><li>这个东西允许移动设备通过对移动设备优化过的浏览器获取基于WEB内容的访问</li><li>移动APP可以直接访问设备的硬件特性，如GPS，并提供本地处理和存储能力</li><li>移动WEB应用和移动APPS之间的差异在逐渐减小</li></ul></li><li>云计算<ul><li>IAAS：仅租用硬件</li><li>PAAS：IAAS+中间件（数据库等）</li><li>SAAS：PAAS+apps</li></ul></li></ul></li><li>人工智能软件（机器人、人工神经网络和博弈等等）<ul><li>如翻译软件</li></ul></li><li>遗留软件<ul><li>软件需要适应性调整、升级、扩展、改建</li><li>但有一些软件的开发人员会退休等</li><li>产生了旧的架构</li></ul></li><li><strong><em>（不同的软件需要的构造方法、人力成本和只能不同）</em></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 辉夜の软件工程之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TinySnow</title>
      <link href="/2023/04/15/tinysnow/"/>
      <url>/2023/04/15/tinysnow/</url>
      
        <content type="html"><![CDATA[<div class="note orange no-icon flat"><p>本文章情节依附于国产galgame《茸雪》，感兴趣的话，欢迎支持橘子班制作组。🎐🎐</p></div><div class="tag link"><a class="link-card" title="《茸雪》" href="https://store.steampowered.com/app/1002560/_/?curator_clanid=33088444 ✨✨"><div class="left"><img src="https://blogpic-5qb.pages.dev/img/avatar/tinysnow.png"/></div><div class="right"><p class="text">《茸雪》</p><p class="url">https://store.steampowered.com/app/1002560/_/?curator_clanid=33088444 ✨✨</p></div></a></div><h1 id="被操控的爱——《茸雪》-❄️"><a href="#被操控的爱——《茸雪》-❄️" class="headerlink" title=" 被操控的爱——《茸雪》 ❄️"></a><center> <em>被操控的爱——《茸雪》</em> ❄️</h1><h2 id="炒饭三部曲第一篇-emsp-✨"><a href="#炒饭三部曲第一篇-emsp-✨" class="headerlink" title=" 炒饭三部曲第一篇&emsp;✨"></a><center> 炒饭三部曲第一篇&emsp;✨</h2><h2 id="“不愧是炒饭的作品”-emsp-🌈"><a href="#“不愧是炒饭的作品”-emsp-🌈" class="headerlink" title=" “不愧是炒饭的作品”&emsp;🌈"></a><center> “不愧是炒饭的作品”&emsp;🌈</h2><hr><p>&emsp;&emsp;（轻微剧透，请谨慎浏览。）<br>&emsp;&emsp;<u>清新但真实的小品文</u>。<br>&emsp;&emsp;本篇评测根据最长的游戏流程写出。这里是选项→<psw>（第一个选推开，第二个选告诉）</psw></p><hr><p>&emsp;&emsp;喜欢，或者说更深一步的层次——爱，是什么？<br>&emsp;&emsp;从形式上看，它是我们曾一瞬的心动，是一句不离不弃的誓言，抑或是白头偕老直至海枯石烂。<br>&emsp;&emsp;但从生物学的角度来探究，它只是神经与激素共同作用的结果。<br>&emsp;&emsp;亘古时，人类结合只是为了繁衍后代，这是生物与生俱来的意识，而随着文明的发展，特别是私有制的出现，使人与人之间的感情变得难以捉摸，“喜欢”与“爱”逐渐变得高贵，变得不再触手可得。<br>&emsp;&emsp;世界总在把简单的事情复杂化，总在将单纯的事情神圣化，热情讴歌远古时代十分平常的事物。<br>&emsp;&emsp;这份感情，在当今乃至未来，究竟是虚无缥缈，还是实实在在？是毫无意义，还是高贵无价？<br>&emsp;&emsp;《茸雪》正是和我们讨论了这样一个问题。</p><hr><p>&emsp;&emsp;一屋，两人，三餐，四季。听上去是一个美好的爱情故事，但在这最后加上一句话——“一场实验”，这个组合便可让人细思微恐。<br>&emsp;&emsp;为了验证“爱情”究竟是否真实存在，教授“使用”了两个孩子。他们被用生物学手段“影响”过，在“影响”下，他们只能相爱，无法分离。<br>&emsp;&emsp;但他们在长大后，接受了“实验”这个事实，亦接受了彼此之间的感情，这份不限于“兄妹”之间的感情。<br>&emsp;&emsp;这究竟是自由的爱，还是被操控的情感？</p><hr><p>&emsp;&emsp;作者给我们的答案是——这并不重要。<br>&emsp;&emsp;重要的是，眼前的人还在身边，对她的感情依然还在，时节如流，天老地荒，既然心意如此，为何需要踟蹰不前？<br>&emsp;&emsp;“There is only one heroism in the world: to see the world as it is and to love it.”</p><p><p align="right">——Romain Rolland</p><p>&emsp;&emsp;即使我们看清了世界的真相，我们怀疑过、挣扎过、反抗过。但最终我们发现，这个世界仍然由少数人掌管。我们所能做的也只有珍惜当下，珍惜眼前她。<br>&emsp;&emsp;世间诸事皆是如此，我们被所生活的环境不断“影响”着，也正是这份影响，才塑造了被称为“我”的这个人。我们或许无法改变这个世界的复杂性，但我们可以试着在繁忙之余过一段简单的生活。<br>&emsp;&emsp;正如教授那句话，“当你认识到自己是被禁锢的，你才是自由的”<br>&emsp;&emsp;枷锁并不可怕，可怕的是我们无从枷锁中体会到自由，人生而脚戴枷锁，而正是这样的人，才得以创造了人类上下万年的辉煌历史。<br>&emsp;&emsp;正评 完</p><hr><p>&emsp;&emsp;此外，我从这部短片中读出了另一个主题：成长。<br>&emsp;&emsp;“我”的成长，小茸的成长，甚至是那个记者的成长，或许在进行这个实验时，教授，亦在成长。<br>&emsp;&emsp;认清了这个世界，认识到了残酷的现实，每一个人都会从过去的天真无邪逐步走上不再热爱表达的灰色地带甚至走向复杂化、圆润多虑的人格，直至最后看清世界，重识自己。<br>&emsp;&emsp;但很明显，这个过程不会因为推迟而不再痛苦。<br>&emsp;&emsp;橘子班用“我”的行动向我们展示了做法：直截了当。Just adapt to it.<br>&emsp;&emsp;在“我”得知真相以及在”选择告诉小茸真相”之后的“我”和她，都在很长一段时间内怀疑过自己的感情，但最终，都选择了正视——放弃或维持，就是这么简单。<br>&emsp;&emsp;从怀疑，到反抗，再到最终的决定，这便是“我”和小茸的成长，而正是这份成长，让作品迎来了HE——彼此接受，彼此真正脱离“实验”，顺从本心，而相爱。<br>&emsp;&emsp;愿你我都能度过成长，接纳真正的自己。</p><hr><p>&emsp;&emsp;再说一说对番外的看法吧。<br>&emsp;&emsp;如果说正传是传统意义上的HE，那么“雪”篇则是带着流过的血而达成的HE。（不论是剧情还是内涵）<br>&emsp;&emsp;番外中，小雪由被迫“获得”丈夫，再“被迫”杀害他，都是传统观念、资本逐利引发的悲剧，这也映射着当今世界所存在的诟病，但虽说是诟病，它却深深嵌入这个世界的内核，无从撼动。<br>&emsp;&emsp;但之所以这是一个HE，是小雪最终获得了解脱，“人”的求生本性超越了这被给予的“爱情”，身心遭到了毁灭，但也在毁灭中迎来了重生。雪地上，她笑着，哪怕这是被作者安排的笑，但若些许共情，这份笑则是真实的，是解脱的笑，是认清现实的笑，也是作者对这个世界的笑。</p><hr><div class="note orange no-icon flat"><ul><li>更多国g杂谈详见此:<a href="https://teruenight.github.io/categories/%E5%9B%BDG%E6%9D%82%E8%B0%88/">https://teruenight.github.io/categories/%E5%9B%BDG%E6%9D%82%E8%B0%88/</a></li></ul></div><div class="note orange no-icon flat"><ul><li>如果喜欢，感谢来steam评测区点个小小的赞=w=🎐🎐</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 国G杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国G </tag>
            
            <tag> 杂谈 </tag>
            
            <tag> 炒饭三部曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DreamEnding</title>
      <link href="/2023/04/15/dreamending/"/>
      <url>/2023/04/15/dreamending/</url>
      
        <content type="html"><![CDATA[<div class="note orange no-icon flat"><p>本文章情节依附于国产galgame《梦末》，感兴趣的话，欢迎支持橘子班制作组。🎐🎐</p></div><div class="tag link"><a class="link-card" title="《梦末》" href="https://store.steampowered.com/app/944020/_/ ✨✨"><div class="left"><img src="https://blogpic-5qb.pages.dev/img/avatar/dreamending.png"/></div><div class="right"><p class="text">《梦末》</p><p class="url">https://store.steampowered.com/app/944020/_/ ✨✨</p></div></a></div><h1 id="末日下的爱恋——《梦末》-⏳"><a href="#末日下的爱恋——《梦末》-⏳" class="headerlink" title=" 末日下的爱恋——《梦末》 ⏳"></a><center> <em>末日下的爱恋——《梦末》</em> ⏳</h1><h2 id="炒饭三部曲第二篇-emsp-✨"><a href="#炒饭三部曲第二篇-emsp-✨" class="headerlink" title=" 炒饭三部曲第二篇&emsp;✨"></a><center> 炒饭三部曲第二篇&emsp;✨</h2><h2 id="“不愧是炒饭的作品”-emsp-🌈"><a href="#“不愧是炒饭的作品”-emsp-🌈" class="headerlink" title=" “不愧是炒饭的作品”&emsp;🌈"></a><center> “不愧是炒饭的作品”&emsp;🌈</h2><hr><h3 id="游玩之末，感慨万千。"><a href="#游玩之末，感慨万千。" class="headerlink" title="游玩之末，感慨万千。"></a>游玩之末，感慨万千。</h3><h3 id="略微续写，含脑补设定，若有不当之处，还请海涵。"><a href="#略微续写，含脑补设定，若有不当之处，还请海涵。" class="headerlink" title="略微续写，含脑补设定，若有不当之处，还请海涵。"></a>略微续写，含脑补设定，若有不当之处，还请海涵。</h3><hr><p>&emsp;&emsp;……<br>&emsp;&emsp;在认真核对完这四十套名为“唐乐吟”的卷子之后，<br>&emsp;&emsp;我面对着卷子，沉思良久，终了，长叹些许。<br>&emsp;&emsp;我很幸运，在这期间我没有再次发病。<br>&emsp;&emsp;新的卷子不会出现，我亦不会去再主动寻找。<br>&emsp;&emsp;我走出教室，走上街道，阳光正好，微风不燥。<br>&emsp;&emsp;在空无一人的城市漫无目的地徘徊，不知不觉走到一幢熟悉又陌生的民宿。<br>&emsp;&emsp;“唐乐吟她，应该是住这里吧”<br>&emsp;&emsp;做为她男朋友的我，竟到最后没能知道她的住址，但请允许我，凭着“太阳已死”前还未尘封的记忆，寻得你曾经的家。<br>&emsp;&emsp;“若有冒昧，还请原谅。”<br>&emsp;&emsp;我将手放在门把手上，冰凉的触感激起了记忆的层层涟漪，但我强忍住回忆，只为带着她的希望多活哪怕一秒。<br>&emsp;&emsp;“什么嘛，明明很爱干净。”<br>&emsp;&emsp;看着整洁的房间，我不禁怀疑这里是否是她的家，<br>&emsp;&emsp;但桌子上的熟悉的蔬菜汁打消了我的疑虑。<br>&emsp;&emsp;房间布满灰尘，显然是有一段时间没有打扫，用手轻扫过眼前的浮尘，我向那后院走去——唐乐吟种蔬菜的后院。<br>&emsp;&emsp;几天没有人打理，后院已然杂草丛生，杂草间略能识出有一些是曾经她亲手种下的，我缓缓蹲下，用手轻抚菜叶，想象着她栽种时的情景，亦想感受她面对末世的心境。<br>&emsp;&emsp;本想动手清理杂草，但最后不知为何，不忍打乱这里的一切，<br>&emsp;&emsp;但我知道它们依然有概率活下去，哪怕很小，“但不是零”。</p><hr><p>&emsp;&emsp;又过了几天，我能感受到“它”的确临近了。<br>&emsp;&emsp;比起以往的恐慌与无力，我更多的感受是平淡与无味，或许是梦末的作用吧。<br>&emsp;&emsp;长时间生活在辐射不低的环境里，我的身体也日渐消弱，<br>&emsp;&emsp;最后的时间里，我选择了回到曾经与她度过那一晚的志愿者休息间，<br>&emsp;&emsp;我不知病魔何时会来，亦不知太阳是否下一秒就会爆发。<br>&emsp;&emsp;我能做的唯有：<br>&emsp;&emsp;平躺，冥想，深思，睡去。<br>&emsp;&emsp;不断循环。<br>&emsp;&emsp;梦中，是一片花海，花海中央站立着一位亭亭玉立的女子——不是别个，正是唐乐吟。<br>&emsp;&emsp;“毕姥爷，你来了”，她的笑容一如既往的充满捉弄。<br>&emsp;&emsp;“没事了，一切都没事了，这是一个太阳不会爆发的世界”<br>&emsp;&emsp;她的声音一如既往的令人怀念。<br>&emsp;&emsp;“毕升…你在听吗？” 她向我挥手，我亦伸出手回应。<br>&emsp;&emsp;指尖相触的那一刻，梦境猛然破碎，我也从梦中惊醒。<br>&emsp;&emsp;“果然，梦末没有给我留下一点机会”<br>&emsp;&emsp;“真是不如死了算了”，我心想。<br>&emsp;&emsp;或许是上天听到了我的愿望，<br>&emsp;&emsp;就在这不久后的一个夜里，我猛地惊醒，眼前昏花，四肢脱力，暗红的血管暴起。<br>&emsp;&emsp;“终究..还是…来了吗…”<br>&emsp;&emsp;强忍着情绪的崩溃，我眼中最后的图像依然是她，也只能是她。<br>&emsp;&emsp;为了我，她不惜让自己情绪波动，削减寿命。<br>&emsp;&emsp;为了我，她不惜出门寻找鱼竿，哪怕随时被氦闪毙命。<br>&emsp;&emsp;为了我，她想尽一切，只愿不让我变为末世中没有思想没有感情难以被称为人的“死人”。<br>&emsp;&emsp;“谢谢你，在努力地爱我”<br>&emsp;&emsp;她的声音在耳畔久久回荡。<br>&emsp;&emsp;“也谢谢你，同样在努力地爱我”<br>&emsp;&emsp;我不知自己是否发出了声音，情绪的压力已然冲淡了所有感知能力。<br>&emsp;&emsp;“现在，让我去找你吧”<br>&emsp;&emsp;最后，我放弃了挣扎，因为我知道没有了药物，我所面对的只有死亡。<br>&emsp;&emsp;肉体逐渐死去，灵魂逐渐自由。<br>&emsp;&emsp;最后的最后，痛感似乎在减轻，略微睁眼，我看到身旁再次出现了唐乐吟的身影，她抱着我，依然以那天晚上的姿势。<br>&emsp;&emsp;她向我笑着，我便以微笑回应。<br>&emsp;&emsp;“我们，终于可以自由地去爱了啊。”</p><hr><p>&emsp;&emsp;一切回归平静，这座城市不再有人的生气。<br>&emsp;&emsp;风吹鸟叫，虫鸣喧嚣。<br>&emsp;&emsp;在遥远的“方舟”上，人们已经找到了目标星球，根据测算，在燃料耗尽前，兴许有机会到达。<br>&emsp;&emsp;唐乐吟和毕升一定不会想到，此时，唐乐吟的录音已成为每个人在想念地球时必听的内容，她让每一个人保留了对地球的感念， 而这段故事，也成为了后人代代相传的地球童话。<br>&emsp;&emsp;唯一遗憾的是，他们再也见不到此番图景了。<br>&emsp;&emsp;终。</p><hr><div class="note orange no-icon flat"><ul><li>更多国g杂谈详见此:<a href="https://teruenight.github.io/categories/%E5%9B%BDG%E6%9D%82%E8%B0%88/">https://teruenight.github.io/categories/%E5%9B%BDG%E6%9D%82%E8%B0%88/</a></li></ul></div><div class="note orange no-icon flat"><ul><li>如果喜欢，感谢来steam评测区点个小小的赞=w=🎐🎐</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 国G杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国G </tag>
            
            <tag> 杂谈 </tag>
            
            <tag> 炒饭三部曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First post</title>
      <link href="/2023/04/12/firstpost/"/>
      <url>/2023/04/12/firstpost/</url>
      
        <content type="html"><![CDATA[<h2 id="This-is-my-first-post"><a href="#This-is-my-first-post" class="headerlink" title="This is my first post."></a>This is my first post.</h2><h2 id="It-has-memorible-meanings"><a href="#It-has-memorible-meanings" class="headerlink" title="It has memorible meanings."></a>It has memorible meanings.</h2><h2 id="This-post-has-no-utilities-XD"><a href="#This-post-has-no-utilities-XD" class="headerlink" title="This post has no utilities XD."></a>This post has no utilities XD.</h2><h2 id="Now-you-can-back-to-the-home-of-my-blog-XD"><a href="#Now-you-can-back-to-the-home-of-my-blog-XD" class="headerlink" title="Now you can back to the home of my blog XD."></a>Now you can back to the home of my blog XD.</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>年。</title>
      <link href="/2023/01/22/newyear/"/>
      <url>/2023/01/22/newyear/</url>
      
        <content type="html"><![CDATA[<h1 id="年。"><a href="#年。" class="headerlink" title=" 年。"></a><center> 年。</h1><hr><p>&emsp;&emsp;寒假，暂住于祖父母家，偶然得知楼下的是一条老商业街，便出于好奇心，在晚饭前前去体验。<br>&emsp;&emsp;说白了，我想感受一下这独属于老城的年味，这一我曾不会去奢求的事情。<br>&emsp;&emsp;独自漫步于老街上，我摘下耳机，感受嘈杂而又宁静的周遭。</p><p>&emsp;&emsp;今晚是除夕夜，此时的老街，犹如冷下来的炉灶，当日历撕到最后一页，柴，也添无可添。<br>&emsp;&emsp;街上人数寥寥，即便是为了生计日夜奔忙于此的人们，在今天也取得了外出小憩，寻找属于自己的热闹的机会。<br>&emsp;&emsp;远处的车流吵吵闹闹，却无法干预这里的宁静美好。<br>&emsp;&emsp;在这里经营数年的老铺子，大部分已然打样，桌椅整整齐齐地摆放在屋内，门上贴好了“春节休假”的告示。<br>&emsp;&emsp;这里也不乏有正在转让的门头，希望店主早已找到了新的归宿。<br>&emsp;&emsp;唯有不远处的24小时便利店，发光的牌子彰显着“永不休市”的骄傲，经过时，还有几位顾客在细心地挑选自己所需的商品。<br>&emsp;&emsp;背着书包的几个学生从我身边跑过，冲进他们所心心念念的楼洞，或许是期待着今晚能拿到多少压岁钱。<br>&emsp;&emsp;打着电话的青年爽朗地笑着，对着电话欣喜地说道，“妈，我回来了”。<br>&emsp;&emsp;更多的人只是看向前方，匆匆地走着，虽然脸上都不出意外地流露出喜悦。</p><p>&emsp;&emsp;我的确喜欢这样的安宁，但这与我记忆当中的除夕夜显然大相径庭。<br>&emsp;&emsp;老街..显得过于冷清了。<br>&emsp;&emsp;即使今天是除夕，如果不提醒我，我甚至会认为今天是普通的休息日。<br>&emsp;&emsp;在这样喜庆的日子里，我每闭上眼，都是漫天烟花灿烂，人们你说我笑的情景。<br>&emsp;&emsp;但这些场景显然没有在现在的老街再现。<br>&emsp;&emsp;我不愿相信住在老街两旁的人们不再亲仁善邻，亦不愿相信人们不再喜爱鞭炮。<br>&emsp;&emsp;“或许只是世事变迁吧”，我心中猜想着。</p><p>&emsp;&emsp;步履未止，周遭渐转。<br>&emsp;&emsp;我走上天桥，胳膊搭在栏杆上，喝着随手买来的饮料，百无聊赖地浏览着桥下络绎不绝的车流。<br>&emsp;&emsp;夕阳将淡金色的光辉铺在这座城市的表面，在远处的高楼上映出自己的模样。<br>&emsp;&emsp;我眯起眼，不断论证刚刚心中的猜想。<br>&emsp;&emsp;“不过，这趟老商业街之旅的确留有遗憾”</p><p>&emsp;&emsp;忽地，手机传来了声响。<br>&emsp;&emsp;“儿子，饭做好了，回来吃团圆饭吧，你爸到了”，手机的那头是声音略带激动的妈妈。   “嗯”，我简要地回答道。<br>&emsp;&emsp;夕阳终究是撑不出地平线的引力，缓缓落了下去，天色，也随之而暗。<br>&emsp;&emsp;“今天就先回去吧”</p><p>&emsp;&emsp;在进入老街之前，一束烟花在老街那边的上空绽放开来，展现出的是大红色的“春“字。<br>&emsp;&emsp;“这么早就放烟花吗“，我心中自语。<br>&emsp;&emsp;路上的行人也不禁停下脚步，观赏这“操之过急”，而样式又十分少见的烟花。<br>&emsp;&emsp;一个小男孩一只手捂着耳朵，另一只手指着那朵烟花，大声地对父亲喊道“爸爸，是烟花”。<br>&emsp;&emsp;可这束烟花犹如一把钥匙，打开了尘封已久的老街。</p><p>&emsp;&emsp;紧接着的，是一束又一束烟花在天空中爆裂开来，将这刚刚冷清至极的人间渲染地五光十色。<br>&emsp;&emsp;或许是因为我们家吃饭过早，现在的老街上，即使天色灰暗，仍能看到有不少人在聊天、放炮。<br>&emsp;&emsp;孩童们在老街上借着邻居的打火机，将烟花逐个点燃，尽情享受着春节的热闹，时不时因为玩得过火而被父母轻声训斥，但紧接着又继续从事自己的“烟花大业”。<br>&emsp;&emsp;大人们挂上准备许久的长式挂鞭，在点燃处不断比量，惹得周围的孩子们只得放下手中的活，捂着耳朵，面露难色，等待着爆炸声降临。</p><p>&emsp;&emsp;不仅是这条老街，远方的天空处，同样有簇簇烟花将天空尽数点缀。<br>&emsp;&emsp;“一枝独秀不是春，万紫千红春满园。”</p><p>&emsp;&emsp;老街上方的居民楼，已然是灯火通明，想必是家中的妇女，在热火朝天地准备着晚上的年夜饭吧。<br>&emsp;&emsp;每家的窗户边，大部分已经挂上了灯笼，通上电，灯笼发出红色的光，寓意红红火火。<br>&emsp;&emsp;就连那家便利店，店员也在店主的带领下，参与到这场盛宴当中。<br>&emsp;&emsp;老街上，楼洞中，苍穹下，我唯一能辨识出的是——“年味”。</p><p>&emsp;&emsp;恍惚中，我意识到——“过年了”<br>&emsp;&emsp;年幼时曾经历过的春节的情景，在眼前一幕幕闪过。<br>&emsp;&emsp;我自然不会想回到过去，可我本认为那样的情形如今定然不会再现，但如今这事实正摆在我的眼前，令我欣喜。</p><p>&emsp;&emsp;手机再次响起。<br>&emsp;&emsp;“喂，儿子，快回来，就等你了”，妈妈的声音中略带焦急。<br>&emsp;&emsp;“哦哦好，到了到了”</p><p>&emsp;&emsp;心中略带不舍，可我并不担心，因为我知道， 这样的情景还会再现。<br>&emsp;&emsp;我走进祖父母家所在的楼洞，不禁，我发自内心地笑了，这种感觉，久违了。</p><p>&emsp;&emsp;夜空是除夕夜的锁，而烟花则是这把锁的钥匙。<br>&emsp;&emsp;但这把钥匙却十分调皮，总能在恰如其分的时刻解开这尘封已久的锁——将年味绽放，在这片华夏土地的欢喜满溢之前。</p>]]></content>
      
      
      <categories>
          
          <category> 生活碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 生活碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MysteryLover - 遥远的ta</title>
      <link href="/2022/12/15/mysterylover/"/>
      <url>/2022/12/15/mysterylover/</url>
      
        <content type="html"><![CDATA[<div class="note orange no-icon flat"><p>致，那个令我们破大防的夏天。</p></div><!-- <div class="note orange no-icon flat"><p>本文章情节依附于国产galgame《恋爱绮谭~不存在的夏天~》，感兴趣的话，欢迎支持NKB制作组。🎐🎐</p></div><div class="tag link"><a class="link-card" title="《恋爱绮谭~不存在的夏天~》" href="https://steamcommunity.com/app/1345740 ✨✨"><div class="left"><img src="https://blogpic-5qb.pages.dev/img/avatar/mysterylover.png"/></div><div class="right"><p class="text">《恋爱绮谭~不存在的夏天~》</p><p class="url">https://steamcommunity.com/app/1345740 ✨✨</p></div></a></div> --><h1 id="遥远的ta"><a href="#遥远的ta" class="headerlink" title=" 遥远的ta"></a><center> 遥远的ta</h1><span class='p center small'>“前一世我护你周全，不只因为难舍难分。”</span><span class='p center small'>“这一世我佑你不伤，即便我们素不相识。”</span><hr><p>&emsp;&emsp;在飞机的轰鸣声中，我幽幽醒来，梦里，我仿佛去到了一间公寓，透过窗，月亮将静谧撒在一对轻吻着的情侣身上。</p><p>&emsp;&emsp;“再见了，苏半夏”，他轻轻说到。<br>&emsp;&emsp;“不要，别丢下我”，须臾，我下意识喊出。<br>&emsp;&emsp;我多么希望这一刻凝结成永恒。<br>&emsp;&emsp;但，我做不到。<br>&emsp;&emsp;下一刻，天雷划过，眼前的情景渐行渐远。</p><p>&emsp;&emsp;微微睁眼，却发现眼眶已些许湿润。<br>&emsp;&emsp;很少感性行事的我，在面对关于他的事情时，心中也会一阵悸动。<br>&emsp;&emsp;轻轻拭去泪痕，“又是他啊…”，我喃喃自语。<br>&emsp;&emsp;看向舷窗外，天空清澈明丽，我所心心念念的江城一览无余。<br>&emsp;&emsp;江城，我回来了。</p><p>&emsp;&emsp;江城的一月还是一如既往的熟悉。<br>&emsp;&emsp;天气已然转凉，但在冬日暖阳的眷顾下，仍有些许暖意。<br>&emsp;&emsp;我走下飞机，走出机场，享受着这不可多得的时光。<br>&emsp;&emsp;江城大桥、苹果湖中学、Necoday咖啡厅、老街、非日常部、孱陵路33号、陈墨、钟齐北、我们所解决掉的危险怪异，还有…我心里哪位重要的人。<br>&emsp;&emsp;过往一幕幕闪过眼前，但如同之前一样，不论我如何尝试，在我的记忆拼图中，总有缺失的几块。<br>&emsp;&emsp;这几块，代表着，他。<br>&emsp;&emsp;虽然我不知道他是谁，不，虽然我也许根本没有和他重逢的机会，但我会一直找下去，一定，一定。</p><p>&emsp;&emsp;……</p><p>&emsp;&emsp;在和爸爸妈妈打好招呼后，我独自走出家门，想再多一点和江城共处的时间，以及..再去寻找和他的记忆。</p><p>&emsp;&emsp;脚步轻踏，周遭渐转。</p><p>&emsp;&emsp;苹果湖中学门口，是半年前我和非日常部的朋友们——陈墨、钟齐北告别的地方。<br>&emsp;&emsp;每每路过这里，我总有一种不协调感，一种让我无法忽略，深深刻在我灵魂深处的不协调感。</p><p>&emsp;&emsp;就如同，一盘完整的棋局，被扣去了几粒棋子。<br>&emsp;&emsp;就如同，一幅精致的山水画，被抹去了几只飞雁。<br>&emsp;&emsp;就如同，一整个冬天都未落雪的江城。<br>&emsp;&emsp;在意时，它易寻端倪，而忽略时，又难以察觉。</p><p>&emsp;&emsp;但我知道，只有他，也只能是他。<br>&emsp;&emsp;“那里，本应该还有一个人的”</p><p>&emsp;&emsp;国安路上，站于CNGAL门前，我还记得自己曾独自一人发现微型摄像头，并与店主一起捉住了偷窥狂。<br>&emsp;&emsp;不，不对，不论何时回忆起这里的记忆，都会有严重的逻辑矛盾。<br>&emsp;&emsp;如果是我独自一人，又是谁和偷窥狂在小巷里对质？<br>&emsp;&emsp;如果我是独自一人，又是谁在我扭伤脚后将我背起？<br>&emsp;&emsp;如果我是独自一人，又是谁，能让我在那一个傍晚如此心痛？</p><p>&emsp;&emsp;只有他，也只能是他。</p><p>&emsp;&emsp;步子停在一方候车亭的角落。<br>&emsp;&emsp;依稀记得一个雨天，我在候车亭下等车，手中握着的，是不知何人在何时何地赠予我的红色雨伞，那似乎是我和那人友情的见证。<br>&emsp;&emsp;日历周转，同样是一个雨天，我与那人一同狼狈地被困在这样的亭下，感叹着那把红色雨伞的存在。<br>&emsp;&emsp;在那人身旁，冰冷的雨水不再凛冽，吹过的寒风不再彻骨。<br>&emsp;&emsp;在那人身旁，我可以毫无顾忌地，依靠他肩。<br>&emsp;&emsp;“他的手..在残留的记忆里，很暖。”</p><p>&emsp;&emsp;只有他，也只能是他。</p><p>&emsp;&emsp;可为什么，一旦我明确了他，脑海中的景象便随之模糊。<br>&emsp;&emsp;为什么，为什么。<br>&emsp;&emsp;经停的公交将我的回忆打断，我坐上了前往Necoday的车，心中微微不舍。</p><p>&emsp;&emsp;在Necoday咖啡厅，非日常部的成员在那一角谈天说地的景象似乎仍在眼前。<br>&emsp;&emsp;“但…我们非日常部，真的只有三个人吗”<br>&emsp;&emsp;我不知道，因为我的记忆给予我的是这个答案。<br>&emsp;&emsp;“这里，曾是陈默的位置，”<br>&emsp;&emsp;“这里，是钟齐北的，”<br>&emsp;&emsp;“这是我的座位，”<br>&emsp;&emsp;非日常部的会议位置，是一张四人圆桌，桌边，静静地摆放着四把椅子。<br>&emsp;&emsp;记忆中，我们三个围桌而坐，第四把椅子处，没有人。<br>&emsp;&emsp;但，在我闭上眼时，总有他的身影，出现在第四把椅子处。<br>&emsp;&emsp;记忆否定了他的存在，但我的灵魂却始终告诉我，他，本应存在于我的生命当中。</p><p>&emsp;&emsp;最后一站，是孱陵路老街。<br>&emsp;&emsp;路上，我在江城大桥站下了车，想用步行的方式感受大桥、长江的壮阔。<br>&emsp;&emsp;“也算是我这次回来的证明吧”<br>&emsp;&emsp;桥上，阳光穿过吊着大桥的铁臂，在地面上留下条条印记，身边的车流络绎不绝。<br>&emsp;&emsp;时间，在悄悄流逝。<br>&emsp;&emsp;这六个月里，我通过视频，参加非日常部的日常会议，另一边，我从发现自己记忆有误开始，便没有停止对他的探寻。<br>&emsp;&emsp;实际上，我在很早就发现了我记忆的问题，年幼时，每当我路过那个熟悉的沙坑，便感到些许头痛，而对他的记忆最模糊处，是我进入苹果湖上学进行学习的一年。</p><p>&emsp;&emsp;他，的确存在，而我，却似乎和他错开了一整个生世。</p><p>&emsp;&emsp;渐行渐远，我走到了大桥中央。<br>&emsp;&emsp;回首，转回。<br>&emsp;&emsp;我比较着两侧的江城。<br>&emsp;&emsp;它们不相近似，而又处处类似。<br>&emsp;&emsp;巧似我的人生。<br>&emsp;&emsp;我的过去，我的未来，是如何，将如何。<br>&emsp;&emsp;我不得而知。<br>&emsp;&emsp;但我知道，找到他，也许就找到了答案。</p><p>&emsp;&emsp;在大桥的另一侧，我重新乘上车，前往那最后的目的地。</p><p>&emsp;&emsp;入冬的老商业街，犹如冷下来的炉灶。<br>&emsp;&emsp;当日历撕到最后一页，柴，也添无可添。<br>&emsp;&emsp;今晚是除夕夜，街上人数寥寥，即便是为了生计日夜奔忙于此的人们，在今天也取得了外出小憩，寻找属于自己的热闹的机会。<br>&emsp;&emsp;大排档的桌椅整整齐齐地摆放在屋内，门上贴好了“春节休市”的告示。<br>&emsp;&emsp;不远处的鱼头汤店已经转让，大概店主已然找到了新的归宿。<br>&emsp;&emsp;上补习班回来的学生们，欣喜地走进各自的家门，期待着今晚能够拿到多少压岁钱。<br>&emsp;&emsp;夹着公文包的白领匆匆路过，抱怨着除夕还要加班的公司。<br>&emsp;&emsp;不远处，一家便利店内，大腹便便的店长和店员在看着电视，你一句，我一言地聊着演出的内容。<br>&emsp;&emsp;我喜欢这条老街的热闹，因为它让我感到温馨。<br>&emsp;&emsp;我亦喜欢现在老街的空荡，因为它让我能够漫步于此。<br>&emsp;&emsp;这种喜欢是莫名的。<br>&emsp;&emsp;也许是因为…我的记忆中，最大的波动点便是这里。</p><p>&emsp;&emsp;这意味着，他的存在。<br>&emsp;&emsp;至少，我还能回忆起，那个晚上，有人保护过我。</p><p>&emsp;&emsp;我倒背起双手，合上眼，沿着老街禹禹独行。<br>&emsp;&emsp;也许在他人眼里，我的做法有些奇怪。<br>&emsp;&emsp;奇怪在，在这所有人都围着“家”团团转的时候，有一位女孩却单独出门。<br>&emsp;&emsp;奇怪在，这位女孩天生白发，金瞳与红瞳交相辉映。<br>&emsp;&emsp;奇怪在，这位女孩看上去并不属于这里。<br>&emsp;&emsp;但，凡事总有例外。<br>&emsp;&emsp;这种做法，能让我去体会这条街，体会这座江城。</p><p>&emsp;&emsp;“这条街刚走进来的时候还挺有感觉的，走到这里，又找不到那种熟悉的气息了”<br>&emsp;&emsp;自言自语后，我无奈地在手机地图上记录下位置。</p><p>&emsp;&emsp;地图里，是我在不断努力寻找他的证明。<br>&emsp;&emsp;每一处记忆波动点，我都进行了详细的描述，生怕错过一丝线索。<br>&emsp;&emsp;也许最后我会将他遗忘，但这些，将会永远提醒着我。</p><p>&emsp;&emsp;“嗯，时候不早了，先回家吧，爸爸妈妈还等着呢”</p><p>&emsp;&emsp;不解风情的夕阳将淡金色的光辉铺在江城，在远处的高楼上映出自己的模样，点点碎金洒在少女的肩上，唯美而绮丽，仿佛在温柔地替少女抵消寒冷的侵袭，正如世界一角的他，默默守护了她的这一生。</p><p>&emsp;&emsp;“回美国之前，人多的时候，再来一次吧”<br>&emsp;&emsp;“如果过去我和这条街有什么关系的话…肯定也不是除夕这种日子”<br>&emsp;&emsp;我轻轻摇了摇头，走进一旁的便利店，想要换掉已经燃烧殆尽的暖贴。<br>&emsp;&emsp;“不快点换上新的的话，可能真的会感冒”<br>&emsp;&emsp;“感冒小事，爸爸不让我出来就麻烦了”</p><p>&emsp;&emsp;便利店里，不知疲倦的空调百无聊赖地吐着暖气，恰如其分的暖包裹了少女，少女内心的担忧散去了几分，迈着轻灵的步伐，寻找需要的商品。</p><p>&emsp;&emsp;我走到柜台前，将暖贴递给仍在营业的年轻店员，结了帐。<br>&emsp;&emsp;虽说是店员，可他一幅学生模样，相貌平平，与我在马路上遇到的普通人并无二致。<br>&emsp;&emsp;我没有丝毫其他的意思，只是感觉，世界上，似乎每个人都有自己明确的目标、明确的未来、明确的人生。<br>&emsp;&emsp;可我，却始终被记忆困在牢笼当中…正如深林中的蓝蝶一般，知晓自己的与众不同，但却始终无法逃离这深林去追寻属于自己的、明朗的光亮。<br>&emsp;&emsp;亦并不是说我没有自己的目标，仅仅是…仅仅是记忆里那一段段碎片，如同那林间渗进的光亮般，吸引着想要寻回他的我。</p><p>&emsp;&emsp;“一共33元，您需要袋子吗？”他问道。<br>&emsp;&emsp;“不了，谢谢。”<br>&emsp;&emsp;“欢迎再次光临”</p><p>&emsp;&emsp;推门离开时，我注意到店内播放着的是一首粤语歌，大部分歌词我难以听懂，但有一句却将我的回忆触动。</p><p>&emsp;&emsp;“忘掉砌过的沙，回忆的堡垒，刹那已倒下”</p><p>&emsp;&emsp;“好像，我也用沙子堆过城堡呢”</p><p>&emsp;&emsp;撕开的暖贴将热量传到指尖，这股暖流让恢复活力的毛细血管再次鼓动，而曾经那个旧沙坑的回忆，如同早春河水解冻时的冰一般，划过少女的眼前——<br>&emsp;&emsp;金色的沙旁，是她和一个男孩，沙堡立于沙坑之中，巧似一座空中楼阁。<br>&emsp;&emsp;脚边，是正忙着建设自己家园的蚂蚁们，排成规矩的长队，搬运着片片树叶。<br>&emsp;&emsp;她和男孩有说有笑，雕刻着他们的沙堡，也撰写着他们的友谊。</p><p>&emsp;&emsp;没错，之前不同的是，这次的回忆中，确定地，不可置否地出现了他。<br>&emsp;&emsp;那个她心心念念的他。</p><p>&emsp;&emsp;“那个人，是谁？”<br>&emsp;&emsp;少女略微惊到，她从未在回忆中如此清晰地看到他的模样。<br>&emsp;&emsp;仅仅是非常熟悉。</p><p>&emsp;&emsp;熟悉到，似乎在哪里依靠过他的肩膀，<br>&emsp;&emsp;熟悉到，似乎在哪里与他并肩走在路边，<br>&emsp;&emsp;熟悉到，似乎在哪里，他们曾有过永恒的誓言。</p><p>&emsp;&emsp;然而，现在依旧是寒冬，不是那个不存在的夏天。</p><p>&emsp;&emsp;潮湿的寒风再次掠过这条老街，略微解冻的记忆在瞬间再次被封上，甚至比原来更加牢固。</p><p>&emsp;&emsp;但这并不能阻止少女将那一幕记住。</p><p>&emsp;&emsp;“我…想起那个人了”<br>&emsp;&emsp;“虽然只想起一点点”</p><p>&emsp;&emsp;寒风愈吹愈强，被风吹动的招牌，发出簌簌的响声。<br>&emsp;&emsp;那块始终屹立不倒的鱼头汤招牌，还是抵不住风的洗礼，摇摇晃晃坠向自己的归宿。<br>&emsp;&emsp;不巧的是，目的地正是少女所站的地方。<br>&emsp;&emsp;可少女只是怔怔地站在原地，她的注意力全都放在了那微不可寻的记忆里，完全没有注意到正向自己坠来的招牌。</p><p>&emsp;&emsp;“小心”<br>&emsp;&emsp;忽地，一股力温柔地传到手边，将少女拉离原地，<br>&emsp;&emsp;巨大的鱼头招牌掉在少女刚刚站的地方，<br>&emsp;&emsp;有个人，帮她挡住了四处飞溅的塑料碎片。</p><p>&emsp;&emsp;“没事吧，没有哪里受伤吧。”<br>&emsp;&emsp;“刚刚好危险”</p><p>&emsp;&emsp;“没…没事”<br>&emsp;&emsp;“我完全没有看到那个”</p><p>&emsp;&emsp;拉开少女的，是不久前给少女结账的店员。</p><p>&emsp;&emsp;“啊，那家店关门了，这招牌一直没人修”<br>&emsp;&emsp;“起风时还在和店长聊，说这起大风肯定要砸到人的”<br>&emsp;&emsp;“然后就看到你站在下面了”<br>&emsp;&emsp;“被吓到了吧，要不要去店里坐一下”</p><p>&emsp;&emsp;“嗯…”</p><p>&emsp;&emsp;少女犹豫了一下，<br>&emsp;&emsp;她其实并未被突然坠落的招牌吓到，<br>&emsp;&emsp;暑假时，在这里的老楼冒险的时候，更可怕的景象都遇到过。</p><p>&emsp;&emsp;不过，<br>&emsp;&emsp;“他的手好暖”<br>&emsp;&emsp;少女心想。</p><p>&emsp;&emsp;她不是一个随便的人，也不是一个警惕性低的人。<br>&emsp;&emsp;她的包里放着辣椒喷雾，她的衣服里藏着防身电击枪。<br>&emsp;&emsp;如果是平时，她绝对不会这么随便答应对方的，也不会产生这种奇怪的想法。<br>&emsp;&emsp;可是今天…<br>&emsp;&emsp;或许是除夕，或许是吊桥效应，或许是别的什么冥冥之中的原因。<br>&emsp;&emsp;她觉得，对方的确是好意，她也应该接受对方的好意。</p><p>&emsp;&emsp;“好”<br>&emsp;&emsp;“那个，我叫苏半夏，谢谢你救了我”</p><p>&emsp;&emsp;“没事，这有啥好谢的”<br>&emsp;&emsp;“我叫顾韦，回顾的顾，芦苇去掉草字头的韦”<br>&emsp;&emsp;“是苹果胡中学的学生，在这里打工”</p><hr><p>&emsp;&emsp;残阳终于还是抵不住地平线的吸引，软绵绵地向另一边落去，另一侧，澄明的月已然在天空上印出自己的模样。<br>&emsp;&emsp;银河缓缓移动，远处的北极星，已经亮至可以被肉眼观察的程度，在天空中展现着自己的存在。<br>&emsp;&emsp;这片苍穹下，大大小小的城市已经亮起了灯，点缀在广袤的大地上，车流匆匆，每个人都在为未来不停歇地奔走着。<br>&emsp;&emsp;得知一切的白永，走进她，亦或她们曾来过的华师大校园，走过她曾割舍一切的操场，走到他们曾约定好久别重逢的心形树下，略微靠在树旁，等待着她，亦或她们的出现。<br>&emsp;&emsp;就连忙碌的钟齐北，也在这胜天半子之后，给自己放了个简短的假期。</p><p>&emsp;&emsp;谁又会关注到这一世素不相识的两人跨越时空的重逢呢？<br>&emsp;&emsp;或许，只有你吧，远方的朋友。</p><p>&emsp;&emsp;对于每个人而言，也许每一次意外的初识，都是跨越时间与空间的，相距几生几世的久别重逢。</p>]]></content>
      
      
      <categories>
          
          <category> 国G杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国G </tag>
            
            <tag> 杂谈 </tag>
            
            <tag> 恋爱绮谭 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MysteryLover</title>
      <link href="/2022/08/15/mysterylovercomm/"/>
      <url>/2022/08/15/mysterylovercomm/</url>
      
        <content type="html"><![CDATA[<div class="note orange no-icon flat"><p>本文章情节依附于国产galgame《恋爱绮谭~不存在的夏天~》，感兴趣的话，欢迎支持NKB制作组。🎐🎐</p></div><div class="tag link"><a class="link-card" title="《恋爱绮谭~不存在的夏天~》" href="https://steamcommunity.com/app/1345740 ✨✨"><div class="left"><img src="https://blogpic-5qb.pages.dev/img/avatar/mysterylover.png"/></div><div class="right"><p class="text">《恋爱绮谭~不存在的夏天~》</p><p class="url">https://steamcommunity.com/app/1345740 ✨✨</p></div></a></div><hr><h2 id="“每个人，都有决定自己是谁的权力”"><a href="#“每个人，都有决定自己是谁的权力”" class="headerlink" title="“每个人，都有决定自己是谁的权力”"></a>“每个人，都有决定自己是谁的权力”</h2><p>&emsp;&emsp;致 那个令我们破大防的夏天，</p><p>&emsp;&emsp;首先，按照理性来解析一下这部作品吧。<br>&emsp;&emsp;题材上，确实是挑战了一个新的领域，并且，制作组发挥的出人意料的好，算是沉重与糖并存。<br>&emsp;&emsp;画面上，场景细节，氛围渲染，以及人物设计一定可以抓住（物理和心理）你的心。（如果有人不爱白毛异瞳美少女，那ta一定没有遇到过苏半夏！）<br>&emsp;&emsp;配音上，齐北的稳重与深藏不露，真真的灵动与对怪异的热忱，半夏的温柔与内心的矛盾以及苏溯表现出的冷淡与痛苦都体现地淋漓尽致，可以感受到配音老师制作时的认真。<br>&emsp;&emsp;剧情上，如题，怪谈+悬疑+恋爱，有微恐（？）元素，可以稍加注意。另外，速刷时你一定会发现这部作品有很多设定上留下的悬念与矛盾点，不过认真游玩过后，相信大部分悬念会迎刃而解，其他的，就静待制作组在“不存在的真相”中的发挥吧。<br>&emsp;&emsp;对于TE，也许会有人难以接受（比如一刷结束时我，呜呜呜为什么浅色你这么刀），也有人认为这是一个HE（比如现在的我），不过，这虽然不是那个所有人都喜闻乐见的end，但却是给予苏半夏，以及引出下一作，所能做出的最好的结局。</p><p>&emsp;&emsp;接下来，是有感而发的文字。<br>&emsp;&emsp;我们喜欢一个人，究竟是喜欢ta的外表？声音？身体？<br>&emsp;&emsp;还是ta的性格？智慧？财富？<br>&emsp;&emsp;没错，都不是。<br>&emsp;&emsp;而是我们喜欢ta内心的自己，那个卸去外在盔甲，所展露出来的，最真实的ta。<br>&emsp;&emsp;苏半夏，便是这最真实的她。</p><p>&emsp;&emsp;她温柔体贴，能读懂顾韦的一举一动。<br>&emsp;&emsp;她冰雪聪明，为了不伤害顾韦宁愿独自离去。<br>&emsp;&emsp;她反抗世俗，不甘成为父母的傀儡。<br>&emsp;&emsp;她渴望自由，为了“成为”“苏半夏”不惜走向灭亡。<br>&emsp;&emsp;正是这样一个苏半夏，打动了顾韦的心。<br>&emsp;&emsp;哪怕“你的行为是受人控制的”，<br>&emsp;&emsp;哪怕“你会成为永远的工具人”，<br>&emsp;&emsp;顾韦为了所爱之人，义无反顾，走向深渊。</p><p>&emsp;&emsp;“在我眼里，你从来不是怪物”<br>&emsp;&emsp;“从一开始，我认识的就是苏半夏”<br>&emsp;&emsp;“和我一起调查的就是苏半夏，站在雨中等车的就是苏半夏，我背着的人就是苏半夏，在泳池里和我接吻的就是苏半夏，我爱上的人，也是苏半夏”<br>&emsp;&emsp;“我的女朋友，就是苏半夏”<br>&emsp;&emsp;“她就在这里。”</p><p>&emsp;&emsp;回忆的胶卷刷刷掠过，<br>&emsp;&emsp;还记得，那夜半夏为顾韦所救，喜欢的种子仿佛久旱而逢甘雨，再度发芽。<br>&emsp;&emsp;还记得，那天半夏对顾韦五味杂陈的告白，让顾韦的人生不再平凡。<br>&emsp;&emsp;还记得，那次半夏与顾韦一同在车站等车，手牵手中流露着难以掩饰的幸福。<br>&emsp;&emsp;还记得，那晚知晓一些真相的顾韦，推开那扇门，向否定自己存在的半夏说出令她无法拒绝的求婚词<br>&emsp;&emsp;还记得，那个夏天，知晓结局的顾韦仍然遵从哪怕是受人控制的本心，拯救了半夏。<br>&emsp;&emsp;“一切，归零。”<br>&emsp;&emsp;因果逆转，往事烟消云散。<br>&emsp;&emsp;半夏拥有了幸福的家庭，<br>&emsp;&emsp;她成为了普普通通的女孩，<br>&emsp;&emsp;她可以自由地，选择自己的生活，选择自己想要成为的样子。<br>&emsp;&emsp;还记得，那是一个不存在的夏天，<br>&emsp;&emsp;“那里，本来应该有这谁的”<br>&emsp;&emsp;“有着我想不起来，也认不出的谁”<br>&emsp;&emsp;“我忘掉了很重要的事情”<br>&emsp;&emsp;“街上人来人往，每个人都行色匆匆，像是忙碌的蚂蚁”<br>&emsp;&emsp;“只有我，在擦着泪水”</p><p>&emsp;&emsp;不过，也是一个完美的夏天。</p><p>&emsp;&emsp;唯有自己可以决定自己想要成为的人，而这个自己，便是每个人内心的ta。<br>&emsp;&emsp;是啊，喜欢一个人，去喜欢一个人内心的ta，足矣，那才是ta真正的样子。</p><p>&emsp;&emsp;最后，在此衷心祝愿各位mtf坚定地生活下去！！</p><p>&emsp;&emsp;END</p><p>&emsp;&emsp;（以下为胡言乱语）<br>&emsp;&emsp;呜呜呜制作组你真的好刀啊，“在短短的一天中，我经历了半夏一生的故事”，“有着我想不起来，也认不出的谁”，还有在半夏离开苹果湖中学，眼中含泪时，直接抛出概括顾韦与苏半夏一起的经历的ed，半夜直接听破防了呜呜呜，看完了完全缓不过来呜呜呜，希望“不存在的真相“能给他们一个he！！</p><p>&emsp;&emsp;最后的最后，想聊聊dlc“玛奇朵之夏”。<br>&emsp;&emsp;相信这份dlc也算是圆了很多人的心愿（如果二者重识的过程能再长一些，再细致一些就更好了！！），即使有一生的距离，那份喜欢不会改变，就像焦糖玛奇朵一般，从糖浆的甜，至咖啡的苦，最后依然是焦糖彻人心扉且熟悉的回甘。<br>&emsp;&emsp;在游玩dlc之后的第二天，我便也前往常去的咖啡店，点一杯焦糖玛奇朵，轻轻端起，找一个静谧的角落，听着ed，回味着这篇作品的一切…<br>&emsp;&emsp;焦糖玛奇朵“层次分明，香浓醇厚，甜蜜细腻”，的确，其英文“Caramel Macchiato”，寓意为“甜蜜的印记”，拖杯，小呷一口，半夏与顾韦所经历的种种，在眼前回放，胜似自己一同经历一般，心中微悸，反应时，竟眼眶湿润。<br>&emsp;&emsp;茶托轻放，看向窗外遥远的天空，轻笑，不曾想这部作品会给自己带来如此深刻的体验与感受，仿佛自己也曾失去过“苏半夏”，转念之时，ed悄然结尾，<br>&emsp;&emsp;“抛下从前，才能与未来相连。”<br>&emsp;&emsp;“那个夏天，曾存在过的爱恋。”<br>&emsp;&emsp;人生还长，愿我们都不再失望，行至所期盼的彼方。<br>&emsp;&emsp;走出咖啡店，那写有“Caramel Macchiato”的咖啡杯正静静呆在那角落，亦如我们曾放下的，那年盛夏。</p>]]></content>
      
      
      <categories>
          
          <category> 国G杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国G </tag>
            
            <tag> 杂谈 </tag>
            
            <tag> 恋爱绮谭 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于店长</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<span class='p center h4'>喜报，店长这个笨比还没想好怎么写这个个人about</span>  <p>坐标上海，材料苦手，是intj（测出来是这样的虽然亲友大多否定）。<br>这是一个兴趣使然的博客，如果你能关注那么红豆泥阿里嘎多！！！<br>Into 材料科学与工程、机器学习、python、AIGC、崩铁、旮旯给木、摄影、计算机。<br>这个博客也会发一些这方面的post。<br>另外，店长是流萤厨，剧情党，嗑星萤、穹萤、小鸟兄妹cb，喜欢收集各种周边，比较大的展子和演唱会也都会去，欢迎联系交换无料~  </p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>辉夜の插画厅</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[<span class='p left h4'>虽然说是插画厅但还是放了很多喜欢的照片</span><hr><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://blogpic-5qb.pages.dev/img/postcover/18.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">文章封面</div>  <p>文章封面图片，部分已压缩</p>  <a href='/gallerys/cover'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://blogpic-5qb.pages.dev/img/postcover/21.JPG' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">FIREFLY</div>  <p>“我梦见一片焦土...”</p>  <a href='/gallerys/firefly'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://blogpic-5qb.pages.dev/img/gallery_photo/8.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I am Nikon</div>  <p>Pass The World</p>  <a href='/gallerys/photo'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(255, 158, 53)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/f12.js"/>
      <url>/js/f12.js</url>
      
        <content type="html"><![CDATA[document.onkeydown = function (e) {    if (123 == e.keyCode || (e.ctrlKey && e.shiftKey && (74 === e.keyCode || 73 === e.keyCode || 67 === e.keyCode)) || (e.ctrlKey && 85 === e.keyCode)) return btf.snackbarShow("你真坏，不能打开控制台喔!"), event.keyCode = 0, event.returnValue = !1, !1};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/fps.js"/>
      <url>/js/fps.js</url>
      
        <content type="html"><![CDATA[if (window.localStorage.getItem("fpson") == undefined || window.localStorage.getItem("fpson") == "1") {    var rAF = function () {        return (            window.requestAnimationFrame ||            window.webkitRequestAnimationFrame ||            function (callback) {                window.setTimeout(callback, 1000 / 60);            }        );    }();    var frame = 0;    var allFrameCount = 0;    var lastTime = Date.now();    var lastFameTime = Date.now();    var loop = function () {        var now = Date.now();        var fs = (now - lastFameTime);        var fps = Math.round(1000 / fs);        lastFameTime = now;        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS        allFrameCount++;        frame++;        if (now > 1000 + lastTime) {            var fps = Math.round((frame * 1000) / (now - lastTime));            if (fps <= 5) {                var kd = `<span style="color:#bd0000">好卡🤢</span>`            } else if (fps <= 15) {                var kd = `<span style="color:red">电竞级😖</span>`            } else if (fps <= 25) {                var kd = `<span style="color:orange">有点难受😨</span>`            } else if (fps < 35) {                var kd = `<span style="color:#9338e6">不太流畅🙄</span>`            } else if (fps <= 45) {                var kd = `<span style="color:#08b7e4">还不错哦😁</span>`            } else {                var kd = `<span style="color:#39c5bb">十分流畅🤣</span>`            }            document.getElementById("fps").innerHTML = `FPS:${fps} ${kd}`;            frame = 0;            lastTime = now;        };        rAF(loop);    }    loop();} else {    document.getElementById("fps").style = "display:none!important"}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/txmap.js"/>
      <url>/js/txmap.js</url>
      
        <content type="html"><![CDATA[//get请求$.ajax({    type: 'get',    url: 'https://apis.map.qq.com/ws/location/v1/ip',    data: {        key: 'OI2BZ-DIPLZ-S3HXM-7G2CI-KVBQE-R3FOC',        output: 'jsonp',    },    dataType: 'jsonp',    success: function (res) {        ipLoacation = res;    }})function getDistance(e1, n1, e2, n2) {     const R = 6371    const { sin, cos, asin, PI, hypot } = Math    let getPoint = (e, n) => {        e *= PI / 180        n *= PI / 180        return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }    }    let a = getPoint(e1, n1)    let b = getPoint(e2, n2)    let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)    let r = asin(c / 2) * 2 * R    return Math.round(r);}function showWelcome() {    let dist = getDistance(121.00, 31.00, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let ip;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    switch (ipLoacation.result.ad_info.nation) {        case "日本":            posdesc = "よろしく，一起去看樱花吗";            break;        case "美国":            posdesc = "Let us live in peace!";            break;        case "英国":            posdesc = "想同你一起夜乘伦敦眼";            break;        case "俄罗斯":            posdesc = "干了这瓶伏特加！";            break;        case "法国":            posdesc = "C'est La Vie";            break;        case "德国":            posdesc = "Die Zeit verging im Fluge.";            break;        case "澳大利亚":            posdesc = "一起去大堡礁吧！";            break;        case "加拿大":            posdesc = "拾起一片枫叶赠予你";            break;        case "中国":            pos = ipLoacation.result.ad_info.province + " " + ipLoacation.result.ad_info.city + " " + ipLoacation.result.ad_info.district;            ip = ipLoacation.result.ip;            switch (ipLoacation.result.ad_info.province) {                case "北京市":                    posdesc = "北——京——欢迎你~~~";                    break;                case "天津市":                    posdesc = "讲段相声吧。";                    break;                case "河北省":                    posdesc = "山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。";                    break;                case "山西省":                    posdesc = "展开坐具长三尺，已占山河五百余。";                    break;                case "内蒙古自治区":                    posdesc = "天苍苍，野茫茫，风吹草低见牛羊。";                    break;                case "辽宁省":                    posdesc = "我想吃烤鸡架！";                    break;                case "吉林省":                    posdesc = "状元阁就是东北烧烤之王。";                    break;                case "黑龙江省":                    posdesc = "很喜欢哈尔滨大剧院。";                    break;                case "上海市":                    posdesc = "众所周知，中国只有两个城市。";                    break;                case "江苏省":                    switch (ipLoacation.result.ad_info.city) {                        case "南京市":                            posdesc = "这是我挺想去的城市啦。";                            break;                        case "苏州市":                            posdesc = "上有天堂，下有苏杭。";                            break;                        default:                            posdesc = "散装是必须要散装的。";                            break;                    }                    break;                case "浙江省":                    posdesc = "东风渐绿西湖柳，雁已还人未南归。";                    break;                case "河南省":                    switch (ipLoacation.result.ad_info.city) {                        case "郑州市":                            posdesc = "豫州之域，天地之中。";                            break;                        case "南阳市":                            posdesc = "臣本布衣，躬耕于南阳。此南阳非彼南阳！";                            break;                        case "驻马店市":                            posdesc = "峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！";                            break;                        case "开封市":                            posdesc = "刚正不阿包青天。";                            break;                        case "洛阳市":                            posdesc = "洛阳牡丹甲天下。";                            break;                        default:                            posdesc = "可否带我品尝河南烩面啦？";                            break;                    }                    break;                case "安徽省":                    posdesc = "蚌埠住了，芜湖起飞。";                    break;                case "福建省":                    posdesc = "井邑白云间，岩城远带山。";                    break;                case "江西省":                    posdesc = "落霞与孤鹜齐飞，秋水共长天一色。";                    break;                case "山东省":                    posdesc = "遥望齐州九点烟，一泓海水杯中泻。";                    break;                case "湖北省":                    posdesc = "来碗热干面！";                    break;                case "湖南省":                    posdesc = "74751，长沙斯塔克。";                    break;                case "广东省":                    posdesc = "老板来两斤福建人。";                    break;                case "广西壮族自治区":                    posdesc = "桂林山水甲天下。";                    break;                case "海南省":                    posdesc = "朝观日出逐白浪，夕看云起收霞光。";                    break;                case "四川省":                    posdesc = "康康川妹子。";                    break;                case "贵州省":                    posdesc = "茅台，学生，再塞200。";                    break;                case "云南省":                    posdesc = "玉龙飞舞云缠绕，万仞冰川直耸天。";                    break;                case "西藏自治区":                    posdesc = "躺在茫茫草原上，仰望蓝天。";                    break;                case "陕西省":                    posdesc = "来份臊子面加馍。";                    break;                case "甘肃省":                    posdesc = "羌笛何须怨杨柳，春风不度玉门关。";                    break;                case "青海省":                    posdesc = "牛肉干和老酸奶都好好吃。";                    break;                case "宁夏回族自治区":                    posdesc = "大漠孤烟直，长河落日圆。";                    break;                case "新疆维吾尔自治区":                    posdesc = "驼铃古道丝绸路，胡马犹闻唐汉风。";                    break;                case "台湾省":                    posdesc = "我在这头，大陆在那头。";                    break;                case "香港特别行政区":                    posdesc = "永定贼有残留地鬼嚎，迎击光非岁玉。";                    break;                case "澳门特别行政区":                    posdesc = "性感荷官，在线发牌。";                    break;                default:                    posdesc = "带我去你的城市逛逛吧！";                    break;            }            break;        default:            posdesc = "带我去你的国家逛逛吧。";            break;    }    //根据本地时间切换欢迎语    let timeChange;    let date = new Date();    if (date.getHours() >= 5 && date.getHours() < 11) timeChange = "<span>上午好</span>，一日之计在于晨！";    else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = "<span>中午好</span>，该摸鱼吃午饭了。";    else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = "<span>下午好</span>，懒懒地睡个午觉吧！";    else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = "<span>三点几啦</span>，一起饮茶呀！";    else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = "<span>夕阳无限好！</span>";    else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = "<span>晚上好</span>，夜生活嗨起来！";    else timeChange = "夜深了，早点休息，少熬夜。";    try {        //自定义文本和需要放的位置        document.getElementById("welcome-info").innerHTML =            `<b><center>🎉 欢迎信息 🎉</center>&emsp;&emsp;欢迎来自 <span style="color:var(--theme-color)">${pos}</span> 的小伙伴，${timeChange}您现在距离站长约 <span style="color:var(--theme-color)">${dist}</span> 公里，当前的IP地址为： <span style="color:var(--theme-color)">${ip}</span>， ${posdesc}</b>`;    } catch (err) {        // console.log("Pjax无法获取#welcome-info元素🙄🙄🙄")    }}window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码document.addEventListener('pjax:complete', showWelcome);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/comments/index.html"/>
      <url>/comments/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){now.setTime(now.getTime()+1e3);var e=new Date("04/10/2023 00:00:00"),t=Math.trunc(234e8+(now-e)/1e3*17),a=(t/1496e5).toFixed(6),o=new Date("04/10/2023 00:00:00"),n=(now-o)/1e3/60/60/24,r=Math.floor(n),i=(now-o)/1e3/60/60-24*r,s=Math.floor(i);1==String(s).length&&(s="0"+s);var d=(now-o)/1e3/60-1440*r-60*s,l=Math.floor(d);1==String(l).length&&(l="0"+l);var flye=new Date("2024-02-06T10:00:00"),flyn=(now-flye)/1e3/60/60/24,flyr=Math.floor(flyn),flyi=(now-flye)/1e3/60/60-24*flyr,flys=Math.floor(flyi),flyd=(now-flye)/1e3/60-1440*flyr-60*flys,flyl=Math.floor(flyd),flyg=(now-flye)/1e3-86400*flyr-3600*flys-60*flyl,flyb=Math.round(flyg); 1==String(flyb).length&&(flyb="0"+flyb);1==String(flys).length&&(flys="0"+flys);1==String(flyl).length&&(flyl="0"+flyl);var g=(now-o)/1e3-86400*r-3600*s-60*l,b=Math.round(g);1==String(b).length&&(b="0"+b);let c="";c=s<18&&s>=9?` <img class='boardsign' src='' title=''><br> <div style="font-size:13px;font-weight:bold">本店已开张 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i><br>与 FireFly 相遇的第 ${flyr} 天 ${flys} 小时 ${flyl} 分 ${flyb} 秒 🌃</div> </b> <br> <b> <font size = 2px style="white-space: pre-wrap;">“ 𝐼 𝑑𝑟𝑒𝑎𝑚𝑒𝑑 𝑜𝑓 𝑎 𝑠𝑐𝑜𝑟𝑐ℎ𝑒𝑑 𝑒𝑎𝑟𝑡ℎ.   𝐴 𝑛𝑒𝑤 𝑠ℎ𝑜𝑜𝑡 𝑠𝑝𝑟𝑜𝑢𝑡𝑒𝑑 𝑓𝑟𝑜𝑚 𝑡ℎ𝑒 𝑒𝑎𝑟𝑡ℎ.   𝐼𝑡 𝑏𝑙𝑜𝑜𝑚𝑒𝑑 𝑖𝑛 𝑡ℎ𝑒 𝑚𝑜𝑟𝑛𝑖𝑛𝑔 𝑠𝑢𝑛, 𝑎𝑛𝑑 𝑤ℎ𝑖𝑠𝑝𝑒𝑟𝑒𝑑 𝑡𝑜 𝑚𝑒... ”🎇<br>“ 𝐿𝑖𝑘𝑒 𝑓𝑖𝑟𝑒𝑓𝑙𝑖𝑒𝑠 𝑡𝑜 𝑎 𝑓𝑙𝑎𝑚𝑒... 𝑙𝑖𝑓𝑒 𝑏𝑒𝑔𝑒𝑡𝑠 𝑑𝑒𝑎𝑡ℎ. ”🌠</font></b> `:` <img class='boardsign' src='' title=''><br> <div style="font-size:13px;font-weight:bold">本店已开张 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i><br>与 FireFly 相遇的第 ${flyr} 天 ${flys} 小时 ${flyl} 分 ${flyb} 秒 🌃</div> </b> <br> <b> <font size = 2px style="white-space: pre-wrap;">“ 𝐼 𝑑𝑟𝑒𝑎𝑚𝑒𝑑 𝑜𝑓 𝑎 𝑠𝑐𝑜𝑟𝑐ℎ𝑒𝑑 𝑒𝑎𝑟𝑡ℎ.   𝐴 𝑛𝑒𝑤 𝑠ℎ𝑜𝑜𝑡 𝑠𝑝𝑟𝑜𝑢𝑡𝑒𝑑 𝑓𝑟𝑜𝑚 𝑡ℎ𝑒 𝑒𝑎𝑟𝑡ℎ.   𝐼𝑡 𝑏𝑙𝑜𝑜𝑚𝑒𝑑 𝑖𝑛 𝑡ℎ𝑒 𝑚𝑜𝑟𝑛𝑖𝑛𝑔 𝑠𝑢𝑛, 𝑎𝑛𝑑 𝑤ℎ𝑖𝑠𝑝𝑒𝑟𝑒𝑑 𝑡𝑜 𝑚𝑒... ”🎇<br>“ 𝐿𝑖𝑘𝑒 𝑓𝑖𝑟𝑒𝑓𝑙𝑖𝑒𝑠 𝑡𝑜 𝑎 𝑓𝑙𝑎𝑚𝑒... 𝑙𝑖𝑓𝑒 𝑏𝑒𝑔𝑒𝑡𝑠 𝑑𝑒𝑎𝑡ℎ. ”🌠</font></b> `,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=c)}setInterval((()=>{createtime()}),1e3);// <br>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀// var now = new Date();// function createtime() {//     now.setTime(now.getTime() + 1e3);    //     // 原店铺计时开始时间//     const shopStart = new Date("04/10/2023 00:00:00");    //     // 新增的FireFly相遇开始时间 (2024-02-06 10:00:00)//     const fireflyStart = new Date("2024-02-06T10:00:00"); //     // ▂▂▂▂▂▂▂▂ 原有计算逻辑 ▂▂▂▂▂▂▂▂//     var t = Math.trunc(234e8 + (now - shopStart) / 1e3 * 17),//         a = (t / 1496e5).toFixed(6),//         n = (now - shopStart) / 1e3 / 60 / 60 / 24,//         r = Math.floor(n),//         i = (now - shopStart) / 1e3 / 60 / 60 - 24 * r,//         s = Math.floor(i),//         d = (now - shopStart) / 1e3 / 60 - 1440 * r - 60 * s,//         l = Math.floor(d),//         g = (now - shopStart) / 1e3 - 86400 * r - 3600 * s - 60 * l,//         b = Math.round(g);//     // ▂▂▂▂▂▂▂▂ 新增FireFly计时计算 ▂▂▂▂▂▂▂▂//     const fireflyDiff = now - fireflyStart;//     const fireflyDays = Math.floor(fireflyDiff / 864e5);//     const fireflyHours = Math.floor((fireflyDiff % 864e5) / 36e5);//     const fireflyMinutes = Math.floor((fireflyDiff % 36e5) / 6e4);//     const fireflySeconds = Math.floor((fireflyDiff % 6e4) / 1e3);//     // ▂▂▂▂▂▂▂▂ 构建显示内容 ▂▂▂▂▂▂▂▂//     let c = s < 18 && s >= 9 ? //     `<img class='boardsign' src='' title=''><br>  //     <div style="font-size:13px;font-weight:bold">//         本店已开张 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i><br>//         和 FireFly 相遇的第 ${fireflyDays} 天 ${fireflyHours} 小时 ${fireflyMinutes} 分 ${fireflySeconds} 秒 ⭐<br>//         旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀//     </div>//     </b> <br> <b> <font size = 2px style="white-space: pre-wrap;">“ 𝐼 𝑑𝑟𝑒𝑎𝑚𝑒𝑑 𝑜𝑓 𝑎 𝑠𝑐𝑜𝑟𝑐ℎ𝑒𝑑 𝑒𝑎𝑟𝑡ℎ.   𝐴 𝑛𝑒𝑤 𝑠ℎ𝑜𝑜𝑡 𝑠𝑝𝑟𝑜𝑢𝑡𝑒𝑑 𝑓𝑟𝑜𝑚 𝑡ℎ𝑒 𝑒𝑎𝑟𝑡ℎ.   𝐼𝑡 𝑏𝑙𝑜𝑜𝑚𝑒𝑑 𝑖𝑛 𝑡ℎ𝑒 𝑚𝑜𝑟𝑛𝑖𝑛𝑔 𝑠𝑢𝑛, 𝑎𝑛𝑑 𝑤ℎ𝑖𝑠𝑝𝑒𝑟𝑒𝑑 𝑡𝑜 𝑚𝑒... ”🎇<br>“ 𝐿𝑖𝑘𝑒 𝑓𝑖𝑟𝑒𝑓𝑙𝑖𝑒𝑠 𝑡𝑜 𝑎 𝑓𝑙𝑎𝑚𝑒... 𝑙𝑖𝑓𝑒 𝑏𝑒𝑔𝑒𝑡𝑠 𝑑𝑒𝑎𝑡ℎ. ”🌠</font></b> ` //     : //     `<img class='boardsign' src='' title=''><br>  //     <div style="font-size:13px;font-weight:bold">//         本店已开张 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i><br>//         和 FireFly 相遇的第 ${fireflyDays} 天 ${fireflyHours} 小时 ${fireflyMinutes} 分 ${fireflySeconds} 秒 🌙<br>//         旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀//     </div>//     </b> <br> <b> <font size = 2px style="white-space: pre-wrap;">“ 𝐼 𝑑𝑟𝑒𝑎𝑚𝑒𝑑 𝑜𝑓 𝑎 𝑠𝑐𝑜𝑟𝑐ℎ𝑒𝑑 𝑒𝑎𝑟𝑡ℎ.   𝐴 𝑛𝑒𝑤 𝑠ℎ𝑜𝑜𝑡 𝑠𝑝𝑟𝑜𝑢𝑡𝑒𝑑 𝑓𝑟𝑜𝑚 𝑡ℎ𝑒 𝑒𝑎𝑟𝑡ℎ.   𝐼𝑡 𝑏𝑙𝑜𝑜𝑚𝑒𝑑 𝑖𝑛 𝑡ℎ𝑒 𝑚𝑜𝑟𝑛𝑖𝑛𝑔 𝑠𝑢𝑛, 𝑎𝑛𝑑 𝑤ℎ𝑖𝑠𝑝𝑒𝑟𝑒𝑑 𝑡𝑜 𝑚𝑒... ”🎇<br>“ 𝐿𝑖𝑘𝑒 𝑓𝑖𝑟𝑒𝑓𝑙𝑖𝑒𝑠 𝑡𝑜 𝑎 𝑓𝑙𝑎𝑚𝑒... 𝑙𝑖𝑓𝑒 𝑏𝑒𝑔𝑒𝑡𝑠 𝑑𝑒𝑎𝑡ℎ. ”🌠</font></b> `;//     document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c);// }// setInterval(() => { createtime() }, 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.75);  --trans-dark: rgba(25, 25, 25, 0.75);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'YSHST';  /* 字体文件地址(相对或者绝对路径都可以) */  src: url();  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -130px;}/* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: -1;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #ffbd41;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(248, 193, 134);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}.pace {  -webkit-pointer-events: none;  pointer-events: none;  -webkit-user-select: none;  -moz-user-select: none;  user-select: none;  z-index: 2000;  position: fixed;  margin: auto;  top: 4px;  left: 0;  right: 0;  height: 8px;  border-radius: 8px;  width: 7rem;  background: #eaecf2;  border: 1px #e3e8f7;  overflow: hidden}.pace-inactive .pace-progress {  opacity: 0;  transition: .3s ease-in}.pace .pace-progress {  -webkit-box-sizing: border-box;  -moz-box-sizing: border-box;  -ms-box-sizing: border-box;  -o-box-sizing: border-box;  box-sizing: border-box;  -webkit-transform: translate3d(0, 0, 0);  -moz-transform: translate3d(0, 0, 0);  -ms-transform: translate3d(0, 0, 0);  -o-transform: translate3d(0, 0, 0);  transform: translate3d(0, 0, 0);  max-width: 200px;  position: absolute;  z-index: 2000;  display: block;  top: 0;  right: 100%;  height: 100%;  width: 100%;  /* linear-gradient(to right, #3494e6, #ec6ead) */  background: linear-gradient(to right, #f3d397, #fcad02);  animation: gradient 2s ease infinite;  background-size: 200%}.pace.pace-inactive {  opacity: 0;  transition: .3s;  top: -8px}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #5ac3ff;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #78ffe9;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #4affd8;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #dd54ff;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}.loading-img {  background: url(https://blogpic-5qb.pages.dev/img/avatar/neko.jpg) no-repeat center center;  background-size: cover;}/* 帧率检测 */#fps {  position: fixed;  /* 指定位置 */  right: 10px;  bottom: 2px;  z-index: 1919810;}[data-theme="light"] #fps {  background-color: rgba(255, 173, 86, 0.644);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}[data-theme="dark"] #fps {  background-color: rgba(0, 0, 0, 0.72);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}body::-webkit-scrollbar {  width: 0;}.neko {  width: 64px;  height: 64px;  background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");  position: absolute;  right: 32px;  background-repeat: no-repeat;  background-size: contain;  transform: translateX(50%);  cursor: pointer;  font-family: tzy;  font-weight: 600;  font-size: 16px;  color: #ffa53e;  display: none;}.neko::after {  display: none;  width: 100px;  height: 100px;  background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");  background-size: contain;  z-index: 9999;  position: absolute;  right: 50%;  text-align: center;  line-height: 100px;  top: -115%;}.neko.showMsg::after {  content: attr(data-msg);  display: block;  overflow: hidden;  text-overflow: ellipsis;}.neko:hover::after {  content: attr(data-msg);  display: block;  overflow: hidden;  text-overflow: ellipsis;}.neko.fontColor::after {  color: #333;}/*** @description: 滚动条样式  跟猫二选一*/@media screen and (max-width:992px) {  ::-webkit-scrollbar {      width: 8px !important;      height: 8px !important  }  ::-webkit-scrollbar-track {      border-radius: 2em;  }  ::-webkit-scrollbar-thumb {      background-color: rgba(255, 255, 255, 0.3);      background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);      border-radius: 2em  }  ::-webkit-scrollbar-corner {      background-color: transparent  }}/* 头像呼吸灯 */[data-theme="light"] .avatar-img {  animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {  animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {  0% {    box-shadow: 0px 0px 1px 1px #ffdf77;  }  25% {    box-shadow: 0px 0px 5px 5px #ffcb59;  }  50% {    box-shadow: 0px 0px 5px 5px #ffc23f;  }  75% {    box-shadow: 0px 0px 5px 5px #fdb61d;  }  100% {    box-shadow: 0px 0px 1px 1px #ffb24d;  }}@keyframes huxi_dark {  0% {    box-shadow: 0px 0px 1px 1px #ffdf77;  }  25% {    box-shadow: 0px 0px 5px 5px #ffcb59;  }  50% {    box-shadow: 0px 0px 5px 5px #ffc23f;  }  75% {    box-shadow: 0px 0px 5px 5px #fdb61d;  }  100% {    box-shadow: 0px 0px 1px 1px #ffb24d;  }}/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: var(rgb(255,158,53));  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: var(--theme-color);}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(255, 158, 53) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(255, 158, 53) !important;}/* 闪烁变动颜色连续渐变 */#site-name,#site-title,#site-subtitle,#post-info,.author-info__name,.author-info__description {  transition: text-shadow 1s linear !important;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}/* 欢迎信息 */#welcome-info {  background: linear-gradient(45deg, #b9f4f3, #e3fbf9);  border-radius: 18px;  padding: 8px;}[data-theme="dark"] #welcome-info {  background: #ffb74caf;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>店长们</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>FIREFLY</title>
      <link href="/gallerys/firefly/index.html"/>
      <url>/gallerys/firefly/index.html</url>
      
        <content type="html"><![CDATA[<span class='p center h4'>“不堪回首的过去如泡沫一般散去，”</span><span class='p center h4'>“不愿面对的明天永远也不会到来。”</span><span class='p center h4'>“多好啊，一场金色的梦。”</span><hr><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/1.jpg","alt":"p1"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/2.jpg","alt":"p2"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/3.jpg","alt":"p3"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/4.png","alt":"p4"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/5.jpg","alt":"p5"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/6.jpg","alt":"p6"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/7.jpg","alt":"p7"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/8.png","alt":"p8"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/9.png","alt":"p9"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/10.jpg","alt":"p10"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/11.jpg","alt":"p11"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/12.jpg","alt":"p12"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/13.jpg","alt":"p13"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/14.jpg","alt":"p14"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/15.jpg","alt":"p15"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/16.png","alt":"p16"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/17.png","alt":"p17"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/18.png","alt":"p18"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/19.png","alt":"p19"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/20.png","alt":"p20"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/21.png","alt":"p21"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/22.png","alt":"p22"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/23.PNG","alt":"p23"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/24.JPG","alt":"p24"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/25.JPG","alt":"p25"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/26.JPEG","alt":"p26"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/27.JPEG","alt":"p27"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_firefly/28.JPG","alt":"p28"}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章封面</title>
      <link href="/gallerys/cover/index.html"/>
      <url>/gallerys/cover/index.html</url>
      
        <content type="html"><![CDATA[<span class='p center h4'>“小小的我们，将小小的愿景，许入那星星点点的萤火微光中，汇聚成小小的诺言”</span><span class='p center h4'>“或许，这就是「见过夏天」”</span><hr><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://blogpic-5qb.pages.dev/img/postcover/20.jpg","alt":"p1"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/21.JPG","alt":"p2"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/1.png","alt":"p3"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/2.jpg","alt":"p4"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/4.jpg","alt":"p5"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/5.png","alt":"p6"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/6.png","alt":"p7"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/7.png","alt":"p8"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/8.jpg","alt":"p9"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/9.jpg","alt":"p10"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/10.png","alt":"p11"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/11.png","alt":"p12"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/12.png","alt":"p13"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/13.jpg","alt":"p14"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/14.png","alt":"p15"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/15.jpg","alt":"p16"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/16.png","alt":"p17"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/17.png","alt":"p18"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/18.png","alt":"p19"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/19.jpg","alt":"p20"},{"url":"https://blogpic-5qb.pages.dev/img/postcover/3.jpg","alt":"p21"}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>I AM NIKON</title>
      <link href="/gallerys/photo/index.html"/>
      <url>/gallerys/photo/index.html</url>
      
        <content type="html"><![CDATA[<span class='p center h4'>“很想带着手机、相机、电脑，”</span><span class='p center h4'>“以及喜欢的咖啡与茶，”</span><span class='p center h4'>“去外面寻找属于自己的新生。”</span><hr><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/1.jpg","alt":"p1"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/2.jpg","alt":"p2"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/3.jpg","alt":"p3"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/4.jpg","alt":"p4"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/5.JPG","alt":"p5"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/6.jpg","alt":"p6"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/7.JPG","alt":"p7"},{"url":"hhttps://blogpic-5qb.pages.dev/img/gallery_photo/8.jpg","alt":"p8"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/9.png","alt":"p9"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/10.png","alt":"p10"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/11.png","alt":"p11"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/12.jpg","alt":"p12"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/13.jpg","alt":"p13"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/14.jpg","alt":"p14"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/15.jpg","alt":"p15"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/16.jpg","alt":"p16"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/17.JPG","alt":"p17"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/18.JPG","alt":"p18"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/19.jpg","alt":"p19"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/20.jpg","alt":"p20"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/21.jpg","alt":"p21"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/22.jpg","alt":"p22"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/23.jpg","alt":"p23"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/24.jpg","alt":"p24"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/25.jpg","alt":"p25"},{"url":"https://blogpic-5qb.pages.dev/img/gallery_photo/26.jpg","alt":"p26"}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
    </entry>
    
    
  
</search>
